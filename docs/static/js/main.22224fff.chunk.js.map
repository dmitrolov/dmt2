{"version":3,"sources":["app/components/mainMenu/MainMenu.tsx","app/constants/routes.ts","app/api/firebase/firebase.ts","app/pages/adventureCreate/AdventureCreate.tsx","app/pages/adventureList/AdventureList.tsx","app/pages/adventureView/AdventureView.tsx","app/pages/characterCreate/CharacterCreate.tsx","app/pages/characterView/CharacterView.tsx","app/redux/constants.ts","app/redux/actions/index.ts","app/redux/actions/userActions.ts","app/pages/home/Home.tsx","app/pages/signIn/SignIn.tsx","app/pages/signUp/SignUp.tsx","app/App.tsx","app/redux/reducers/userDataReducer.ts","app/redux/reducers/index.ts","store.ts","index.tsx"],"names":["menuOptions","returnButton","name","link","icon","FaHome","menuButtons","connect","props","React","useState","open","setOpen","clientWindowResolution","width","height","menuSize","useEffect","document","getElementsByClassName","addEventListener","e","preventDefault","renderMenuItems","map","option","index","rotationStep","length","className","style","transform","marginLeft","to","onClick","ClickAwayListener","onClickAway","maxHeight","backButtonSize","backButtonIconSize","call","renderMenu","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","newAdventure","description","image","playersList","dungeonMaster","charactersList","notes","playerEmail","setPlayerEmail","errorsList","setErrorsList","history","useHistory","currentErrors","onChange","event","target","value","placeholder","push","email","console","log","firestore","collection","doc","set","then","response","error","adventuresList","setAdventuresList","get","adventures","docs","data","adventure","id","match","params","state","setState","characterData","setCharacterData","docName","character","JSON","stringify","actions","SET_USER","userActionTypes","setUserActionConverter","user","type","payload","createAction","setUserAction","dispatch","a","async","userData","setUser","userEmail","setUserEmail","bodyWidth","getElementsByTagName","clientWidth","bodyHeight","clientHeight","auth","onAuthStateChanged","currentUser","alert","signOut","setEmail","password","setPassword","statusList","setStatus","pass","signInWithEmailAndPassword","catch","SignInEmail","firebaseResponse","message","validationErrors","test","String","toLowerCase","validation","createUserWithEmailAndPassword","SignUpEmail","App","setClientWindowResolution","onWindowResize","body","window","onresize","appContainerStyles","display","flexDirection","minWidth","maxWidth","minHeight","border","overflow","exact","path","component","Home","SignIn","SignUp","AdventureCreate","AdventureList","AdventureView","CharacterCreate","CharacterView","initialState","rootReducer","combineReducers","action","middleware","thunk","env","REACT_APP_NODE_ENV","logger","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","basename","getElementById"],"mappings":"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","file":"static/js/main.22224fff.chunk.js","sourcesContent":["import { ClickAwayListener } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { IconType } from 'react-icons';\r\nimport { FaHome } from 'react-icons/all';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { ClientWindowResolution } from '../../App';\r\nimport * as ROUTES from '../../constants/routes';\r\nimport './MainMenu.sass';\r\n\r\ninterface MainMenuProps {\r\n  clientWindowResolution: ClientWindowResolution\r\n}\r\n\r\nconst MainMenu = (props: MainMenuProps) => {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const { width, height } = props.clientWindowResolution;\r\n  const menuSize = width < height ? width * 0.8 : height * 0.8;\r\n\r\n  useEffect(() => {\r\n    const mainMenuContainer = document.getElementsByClassName('main-menu-container')[0];\r\n    mainMenuContainer.addEventListener('touchmove', e => e.preventDefault(), false);\r\n  }, []);\r\n\r\n  const renderMenu = (menuSize: number) => {\r\n    const backButtonSize = menuSize / 4;\r\n    const backButtonIconSize = menuSize / 5;\r\n\r\n    return <div className='main-menu'>\r\n      { renderMenuItems(menuOptions.menuButtons, menuSize) }\r\n      <div className='main-menu-item-container' style={ {\r\n        width: backButtonSize,\r\n        height: backButtonSize\r\n      } }>\r\n        <Link to={ ROUTES.HOME } onClick={() => {setOpen(false)}}>\r\n          { menuOptions.returnButton.icon?.call(null, {\r\n            style: {\r\n              width: backButtonIconSize,\r\n              height: backButtonIconSize\r\n            }\r\n          }) }\r\n        </Link>\r\n      </div>\r\n    </div>;\r\n  };\r\n\r\n  const renderMenuItems = (menuOptions: { name: string, link: string }[], menuSize: number) => {\r\n    return menuOptions.map((option, index) => {\r\n      const rotationStep = 360 / menuOptions.length;\r\n\r\n\r\n      return <div className='main-menu__item' style={ {\r\n        transform: `rotate(${ index * rotationStep }deg)`,\r\n        width: menuSize / 2 - 6,\r\n        height: menuSize / 3,\r\n        marginLeft: -menuSize / 4 + 3\r\n      } }>\r\n        <div className='main-menu-item-container' style={ {\r\n          transform: `rotate(-${ (index) * rotationStep }deg)`,\r\n          width: menuSize / 3.5,\r\n          height: menuSize / 3.5\r\n        } }>\r\n          <Link to={ option.link } onClick={() => {setOpen(false)}}>{ option.name }</Link>\r\n        </div>\r\n      </div>;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ClickAwayListener onClickAway={ () => setOpen(false) }>\r\n        <div className={ open ? 'main-menu-container opened' : 'main-menu-container' }\r\n             onClick={ open ? () => {} : () => setOpen(!open) }\r\n             style={ open ? {\r\n               width: menuSize,\r\n               height: menuSize,\r\n               maxHeight: menuSize\r\n             } : {} }\r\n        >\r\n          { open && renderMenu(menuSize) }\r\n        </div>\r\n      </ClickAwayListener>\r\n    </>\r\n\r\n  );\r\n};\r\n\r\ninterface MenuOptions {\r\n  returnButton: MenuItemOption\r\n  menuButtons: MenuItemOption[]\r\n}\r\n\r\ninterface MenuItemOption {\r\n  name: string,\r\n  link: string,\r\n  icon?: IconType,\r\n}\r\n\r\nconst menuOptions: MenuOptions = {\r\n  returnButton: { name: 'Главная', link: ROUTES.HOME, icon: FaHome },\r\n  menuButtons: [\r\n    { name: 'Вход', link: ROUTES.SIGN_IN },\r\n    { name: 'Регистрация', link: ROUTES.SIGN_UP },\r\n    { name: 'Создать приключение', link: ROUTES.ADVENTURE_CREATE },\r\n    { name: 'Мои приключения', link: ROUTES.ADVENTURE_LIST },\r\n    { name: 'Создать персонажа', link: '/adventure/view/Djadame/character/create' },\r\n    { name: 'a_a char', link: '/adventure/view/Djadame/character/view/a_a' }\r\n  ]\r\n};\r\n\r\n\r\nexport default connect(null, null)(MainMenu);\r\n","export const HOME = '/';\r\nexport const SIGN_UP = '/signup';\r\nexport const SIGN_IN = '/signin';\r\nexport const ADVENTURE_CREATE = '/adventure/create';\r\nexport const ADVENTURE_LIST = '/adventure/list';\r\nexport const ADVENTURE_VIEW = '/adventure/view/:id';\r\nexport const CHARACTER_CREATE = '/adventure/view/:id/character/create';\r\nexport const CHARACTER_VIEW = '/adventure/view/:id/character/view/:id';\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport { Adventure } from '../../types/adventure/Adventure';\r\n\r\nconst config = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const SignUpEmail = (email: string, password: string) => {\r\n  return firebase.auth()\r\n  .createUserWithEmailAndPassword(email, password)\r\n  .catch((e: any) => {\r\n    return e;\r\n  });\r\n};\r\n\r\nexport const SignInEmail = (email: string, password: string) => {\r\n  return firebase.auth()\r\n  .signInWithEmailAndPassword(email, password)\r\n  .catch((e: any) => {\r\n    return e;\r\n  });\r\n};\r\n\r\nexport const CreateAdventure = (newAdventure: Adventure) => {\r\n  return firebase.firestore()\r\n    .collection('adventures')\r\n    .doc(newAdventure.name)\r\n    .set({...newAdventure})\r\n};\r\n\r\nexport const GetAllUserAdventures: () => Promise<Adventure[]> = () => {\r\n  return firebase.firestore()\r\n    .collection('adventures')\r\n    .get()\r\n    .then(adventures => {\r\n      return adventures.docs.map(doc => {\r\n        return doc.data() as Adventure;\r\n      })\r\n    })\r\n};\r\n\r\nexport const GetCharacter = (docName: string) => {\r\n  return firebase.firestore()\r\n    .collection('playerCharacters')\r\n    .doc(docName)\r\n    .get()\r\n    .then(character => {\r\n      return character.data()\r\n    })\r\n}\r\n\r\n\r\n\r\nexport const getAllChars = () => {\r\n  return firebase.firestore()\r\n  .collection('playerCharacters')\r\n  .get()\r\n  .then((characters) => {\r\n    return characters.docs.map((doc) => {\r\n      return { id: doc.id, ...doc.data() };\r\n    });\r\n  });\r\n};\r\n\r\nexport default firebase;\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { CreateAdventure } from '../../api/firebase/firebase';\r\nimport { Adventure } from '../../types/adventure/Adventure';\r\nimport * as ROUTES from './../../constants/routes';\r\nimport './AdventureCreate.sass';\r\n\r\nconst newAdventure: Adventure = {\r\n  name: '',\r\n  description: '',\r\n  image: '',\r\n  playersList: [],\r\n  dungeonMaster: '',\r\n  charactersList: [],\r\n  notes: []\r\n};\r\n\r\nconst AdventureCreate = () => {\r\n  const [playerEmail, setPlayerEmail] = useState('');\r\n  const [errorsList, setErrorsList] = useState(['']);\r\n  const history = useHistory();\r\n  const currentErrors: string[] = [];\r\n\r\n  const validation = () => {\r\n    if (newAdventure.name.length === 0) currentErrors.push('Adventure name should not be empty');\r\n    if (newAdventure.playersList.length === 0) currentErrors.push('Players list should not be empty');\r\n    setErrorsList(currentErrors);\r\n    console.log('[currentErrors]:', currentErrors);\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    validation();\r\n    if (currentErrors.length === 0) {\r\n      newAdventure.dungeonMaster = newAdventure.playersList[0];\r\n      CreateAdventure(newAdventure).then(response => console.log('[AdventureCreate response]:', response));\r\n      history.push(ROUTES.ADVENTURE_LIST);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='adventure-create'>\r\n      <span>Название приключения*</span>\r\n      <input onChange={ (event => newAdventure.name = event.target.value) } />\r\n      <span>Описание приключения</span>\r\n      <textarea onChange={ (event => newAdventure.description = event.target.value) } />\r\n      <span>Картинка приключения</span>\r\n      <input placeholder='url' onChange={ (event => newAdventure.image = event.target.value) } />\r\n      <span>Добавить игрока</span>\r\n      <div>\r\n        <input placeholder='email' value={ playerEmail } onChange={ (e) => {setPlayerEmail(e.target.value);} } />\r\n        <button onClick={ () => {\r\n          newAdventure.playersList.push(playerEmail);\r\n          setPlayerEmail('');\r\n        } }>Добавить\r\n        </button>\r\n      </div>\r\n      <h4>Игроки*:</h4>\r\n      { newAdventure.playersList.map(email => <span>{ email }</span>) }\r\n      <h4>Dungeon Master*:</h4>\r\n      { newAdventure.playersList[0] }\r\n      <button onClick={ onSubmit }>Создать приключение</button>\r\n      <span>Errors:</span>\r\n      { errorsList.map(error => <span>{ error }</span>) }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, null)(AdventureCreate);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { GetAllUserAdventures } from '../../api/firebase/firebase';\r\nimport { Adventure } from '../../types/adventure/Adventure';\r\nimport './AdventureList.sass';\r\n\r\nexport const AdventureList = () => {\r\n  const [adventuresList, setAdventuresList] = useState<Adventure[]>([]);\r\n\r\n  GetAllUserAdventures().then((adventures: Adventure[]) => {\r\n    setAdventuresList(adventures);\r\n  });\r\n\r\n  useEffect(() => {\r\n\r\n  });\r\n\r\n  return (\r\n    <div className='adventure-list'>\r\n      Advenure List here\r\n      { adventuresList.map(adventure => <Link to={`view/${adventure.name}`}>{ adventure.name }</Link>) }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, null)(AdventureList);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport './AdventureView.sass';\r\n\r\nconst AdventureView = (props: any) => {\r\n  const { match } = props;\r\n  const { id } = match.params;\r\n  const history = useHistory()\r\n\r\n  return (\r\n    <div className='adventure-view'>\r\n      <span>Adventure id { id }</span>\r\n      <Link to={ `${ id }/character/view/a_a` }>a_a</Link>\r\n\r\n      <button onClick={ () => history.push(`/adventure/view/${id}/character/create`) }>Create character</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, null)(AdventureView);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './CharacterCreate.sass';\r\n\r\ninterface CharacterCreateProps {\r\n\r\n}\r\n\r\nconst CharacterCreate = (props: CharacterCreateProps) => {\r\n  const [state, setState] = useState(true);\r\n\r\n  useEffect(() => {\r\n    console.log('[CharacterCreate WORKS!!!]', null);\r\n  }, [state]);\r\n\r\n  return (\r\n    <div className='character-create'>\r\n      <button onClick={ () => setState(!state) }>CharacterCreate WORKS!!!</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, null)(CharacterCreate);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './CharacterView.sass';\r\nimport { GetCharacter } from '../../api/firebase/firebase';\r\n\r\ninterface CharacterViewProps {\r\n  match: any\r\n}\r\n\r\nconst CharacterView = (props: CharacterViewProps) => {\r\n  const [state, setState] = useState(true);\r\n  const [characterData, setCharacterData] = useState();\r\n  const { match } = props;\r\n  const { id } = match.params;\r\n\r\n  useEffect(() => {\r\n    GetCharacter(id).then(data => setCharacterData(data));\r\n    console.log('[characterData]', null);\r\n    console.log('[CharacterView WORKS!!!]', null);\r\n  }, [id]);\r\n\r\n  return (\r\n    <div className='character-view'>\r\n      <button onClick={ () => setState(!state) }>CharacterView WORKS!!!</button>\r\n      <div>THIS CHARACTER IS <b>{id}</b></div>\r\n      <pre className={'character-info'}>{JSON.stringify(characterData, null, 2)}</pre>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, null)(CharacterView);\r\n","export const actions = {\r\n  userActionTypes: {\r\n    SET_USER: 'SET_USER'\r\n  },\r\n\r\n\r\n\r\n\r\n  // samples\r\n  basic: {\r\n    ADD_QUESTION: 'ADD_QUESTION',\r\n    DELETE_QUESTION: 'DELETE_QUESTION',\r\n    DELETE_SKILL: 'DELETE_SKILL',\r\n    ADD_SKILL: 'ADD_SKILL',\r\n    REORDER_SKILLS: 'REORDER_SKILLS',\r\n    REORDER_QUESTIONS: 'REORDER_QUESTIONS',\r\n    ADD_COMMENT: 'ADD_COMMENT',\r\n    DELETE_COMMENT: 'DELETE_COMMENT',\r\n    UPDATE_COMMENT: 'UPDATE_COMMENT',\r\n    UPDATE_RATING: 'UPDATE_RATING',\r\n    CREATE_ALERT: 'CREATE_ALERT',\r\n    DELETE_ALERT: 'DELETE_ALERT',\r\n    RESET_CHECKLIST_VIEWER: 'RESET_CHECKLIST_VIEWER'\r\n  },\r\n  questions: {\r\n    FETCH_QUESTIONS_LIST: 'FETCH_QUESTIONS_LIST',\r\n    FETCH_QUESTION_INFO: 'FETCH_QUESTION_INFO',\r\n    FETCH_QUESTIONS: 'FETCH_QUESTIONS',\r\n    UPDATE_QUESTION: 'UPDATE_QUESTION',\r\n    CREATE_QUESTION: 'CREATE_QUESTION',\r\n    DELETE_QUESTION: 'DELETE_QUESTIONS',\r\n    IMPORT_QUESTION: 'IMPORT_QUESTIONS'\r\n  }\r\n};\r\n","import { User } from '../../types/user/User';\r\nimport { actions } from '../constants';\r\n\r\nconst { userActionTypes } = actions;\r\n\r\nconst createAction = (type: string, payload: any = null) => {\r\n  return {\r\n    type,\r\n    payload\r\n  };\r\n};\r\n\r\nexport const setUserActionConverter = (user: User) => createAction(userActionTypes.SET_USER, user);\r\n","import { Dispatch } from 'redux';\r\nimport { User } from '../../types/user/User';\r\nimport { setUserActionConverter } from './index';\r\n\r\nexport const setUserAction = (user: User) => async (dispatch: Dispatch) => {\r\n  const userData: User = {\r\n    email: user.email,\r\n  };\r\n  dispatch(setUserActionConverter(userData));\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from '../../../store';\r\nimport firebase from '../../api/firebase/firebase';\r\nimport './Home.sass';\r\nimport { setUserAction } from '../../redux/actions/userActions';\r\nimport { User } from '../../types/user/User';\r\n\r\ninterface Home {\r\n  userData: User,\r\n  setUser: (user: User) => void\r\n}\r\n\r\nexport const Home = (props: Home) => {\r\n  const [userEmail, setUserEmail] = useState('');\r\n  const bodyWidth = document.getElementsByTagName('body')[0].clientWidth;\r\n  const bodyHeight = document.getElementsByTagName('body')[0].clientHeight;\r\n\r\n  useEffect(() => {\r\n    props.setUser({email: userEmail});\r\n  }, [userEmail]);\r\n\r\n  firebase.auth().onAuthStateChanged(() => {\r\n    setUserEmail(firebase.auth().currentUser?.email || '');\r\n  });\r\n\r\n  return (\r\n    <div className='home'>\r\n      <h1>Current user - [{ userEmail }]</h1>\r\n      <button onClick={() => alert(props.userData.email)}>Alert user data email from store</button>\r\n      <button onClick={() => firebase.auth().signOut()}>Sign out</button>\r\n      <button onClick={() => alert(bodyWidth)}>Show client width</button>\r\n      <button onClick={() => alert(bodyHeight)}>Show client height</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect((state: AppState) => ({\r\n  userData: state.userData\r\n}), {\r\n  setUser: setUserAction\r\n})(Home)\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { SignInEmail } from '../../api/firebase/firebase';\r\nimport './SignIn.sass';\r\nimport { setUserAction } from '../../redux/actions/userActions';\r\nimport { User } from '../../types/user/User';\r\n\r\ninterface ISignUp {\r\n  setUser: (user: User) => void;\r\n}\r\n\r\nconst SignIn = (props: ISignUp) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [statusList, setStatus] = useState<string[]>([]);\r\n  const history = useHistory()\r\n\r\n  const onSubmit = () => {\r\n    if (statusList.length === 0) SignInEmail(email, password).then(firebaseResponse => {\r\n      if (firebaseResponse.message) setStatus([firebaseResponse.message]);\r\n      if (firebaseResponse.user) {\r\n        const currentUser: User = { email: firebaseResponse.user.email };\r\n        setStatus(['User successfully signed in']);\r\n        props.setUser(currentUser);\r\n        history.push('/')\r\n      }\r\n    });\r\n  };\r\n\r\n  const onEmailChange = (event: any) => {\r\n    const email = event.target.value;\r\n    setEmail(email);\r\n  };\r\n\r\n  const onPasswordChange = (event: any) => {\r\n    const pass = event.target.value;\r\n    setPassword(pass);\r\n  };\r\n\r\n  return (\r\n    <div className='sign-in'>\r\n      <span>E-mail</span>\r\n      <input value={ email } onChange={ onEmailChange } />\r\n      <span>Password</span>\r\n      <input type='password' value={ password } onChange={ onPasswordChange } />\r\n      { statusList.map(error => <span>{ error }</span>) }\r\n      <button onClick={ onSubmit }>Sign Up</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, {\r\n  setUser: setUserAction\r\n})(SignIn);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { SignUpEmail } from '../../api/firebase/firebase';\r\nimport { setUserAction } from '../../redux/actions/userActions';\r\nimport { User } from '../../types/user/User';\r\nimport './SignUp.sass';\r\n\r\ninterface ISignUp {\r\n  setUser: (user: User) => void;\r\n}\r\n\r\nconst SignUp = (props: ISignUp) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [statusList, setStatus] = useState<string[]>([]);\r\n  const history = useHistory();\r\n\r\n  const validation = () => {\r\n    // const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    const re = /\\S+@\\S+\\.\\S+/;\r\n    const validationErrors: string[] = [];\r\n\r\n    if (!re.test(String(email).toLowerCase())) validationErrors.push('The email address is badly formatted.');\r\n    if (password.length < 6) validationErrors.push('Password should be at least 6 characters.');\r\n    setStatus(validationErrors);\r\n    console.log('[validationErrors]:', validationErrors);\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    if (statusList.length === 0) SignUpEmail(email, password).then((firebaseResponse) => {\r\n      if (firebaseResponse.message) setStatus([firebaseResponse.message]);\r\n      if (firebaseResponse.user) {\r\n        const currentUser: User = { email: firebaseResponse.user.email };\r\n        setStatus(['User successfully created and signed in']);\r\n        props.setUser(currentUser);\r\n        history.push('/')\r\n      }\r\n    });\r\n  };\r\n\r\n  const onEmailChange = (event: any) => {\r\n    const email = event.target.value;\r\n    setEmail(email);\r\n  };\r\n\r\n  const onPasswordChange = (event: any) => {\r\n    const pass = event.target.value;\r\n    setPassword(pass);\r\n  };\r\n\r\n  useEffect(() => {\r\n    validation();\r\n  }, [email, password]);\r\n\r\n  return (\r\n    <div className='sign-up'>\r\n      <span>E-mail</span>\r\n      <input value={ email } onChange={ onEmailChange } />\r\n      <span>Password</span>\r\n      <input type='password' value={ password } onChange={ onPasswordChange } />\r\n      { statusList.map(error => <span>{ error }</span>) }\r\n      <button onClick={ onSubmit }>Sign Up</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, {\r\n  setUser: setUserAction\r\n})(SignUp);\r\n","import 'antd/dist/antd.css';\r\nimport React, { CSSProperties, useEffect, useState } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport MainMenu from './components/mainMenu/MainMenu';\r\nimport * as ROUTES from './constants/routes';\r\nimport AdventureCreate from './pages/adventureCreate/AdventureCreate';\r\nimport AdventureList from './pages/adventureList/AdventureList';\r\nimport AdventureView from './pages/adventureView/AdventureView';\r\nimport CharacterCreate from './pages/characterCreate/CharacterCreate';\r\nimport CharacterView from './pages/characterView/CharacterView';\r\nimport Home from './pages/home/Home';\r\nimport SignIn from './pages/signIn/SignIn';\r\nimport SignUp from './pages/signUp/SignUp';\r\n\r\nexport interface ClientWindowResolution {\r\n  width: number\r\n  height: number\r\n}\r\n\r\nexport const App: React.FC = () => {\r\n  const [clientWindowResolution, setClientWindowResolution] = useState<ClientWindowResolution>({ width: 0, height: 0 });\r\n\r\n  const onWindowResize = () => {\r\n    const body = document.getElementsByTagName('body')[0];\r\n    setClientWindowResolution({\r\n      width: body.clientWidth,\r\n      height: body.clientHeight\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.onresize = onWindowResize;\r\n    onWindowResize();\r\n\r\n    return () => {\r\n      window.onresize = null;\r\n    };\r\n  }, []);\r\n\r\n  const appContainerStyles: CSSProperties = {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    width: clientWindowResolution.width,\r\n    minWidth: clientWindowResolution.width,\r\n    maxWidth: clientWindowResolution.width,\r\n    height: clientWindowResolution.height,\r\n    minHeight: clientWindowResolution.height,\r\n    maxHeight: clientWindowResolution.height,\r\n    border: '1px solid red',\r\n    overflow: 'auto'\r\n  };\r\n\r\n  return (\r\n    <div style={ appContainerStyles }>\r\n      <Route exact path={ ROUTES.HOME } component={ Home } />\r\n      <Route path={ ROUTES.SIGN_IN } component={ SignIn } />\r\n      <Route path={ ROUTES.SIGN_UP } component={ SignUp } />\r\n      <Route path={ ROUTES.ADVENTURE_CREATE } component={ AdventureCreate } />\r\n      <Route path={ ROUTES.ADVENTURE_LIST } component={ AdventureList } />\r\n      <Route exact path={ ROUTES.ADVENTURE_VIEW } component={ AdventureView } />\r\n      <Route path={ ROUTES.CHARACTER_CREATE } component={ CharacterCreate } />\r\n      <Route path={ ROUTES.CHARACTER_VIEW } component={ CharacterView } />\r\n\r\n      <MainMenu clientWindowResolution={ clientWindowResolution } />\r\n    </div>\r\n  );\r\n};\r\n","import { ActionReducer } from '../../types/General';\r\nimport { User } from '../../types/user/User';\r\nimport { actions } from '../constants';\r\n\r\nconst initialState: User = {\r\n  email: ''\r\n};\r\n\r\nexport const userDataReducer = (state: User = initialState, action: ActionReducer<User>) => {\r\n  const { SET_USER } = actions.userActionTypes;\r\n\r\n  if (action.type === SET_USER ) {\r\n    return { ...action.payload };\r\n  } else return state;\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { userDataReducer } from './userDataReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  userData: userDataReducer,\r\n});\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './app/redux/reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\nconst env = process.env.REACT_APP_NODE_ENV;\r\n\r\nif (env && env === 'development') {\r\n  // @ts-ignore\r\n  middleware.push(logger);\r\n}\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(\r\n    applyMiddleware(...middleware)\r\n  )\r\n);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { App } from './app/App';\r\nimport './index.scss';\r\nimport { store } from './store';\r\n\r\nconst RoutedApp = () => (\r\n  <Provider store={ store }>\r\n    <Router basename='/dmt2'>\r\n      <App />\r\n    </Router>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(<RoutedApp />, document.getElementById('root'));\r\n"],"sourceRoot":""}