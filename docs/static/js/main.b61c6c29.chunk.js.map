{"version":3,"sources":["app/App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","Layout","Content","Footer","Sider","SubMenu","Menu","App","useState","status","isMenuCollapsed","onMenuClick","style","minHeight","collapsible","collapsed","onCollapse","width","type","onClick","marginBottom","defaultSelectedKeys","mode","theme","inlineCollapsed","Item","key","title","background","padding","margin","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b61c6c29.chunk.js","sourcesContent":["import { Breadcrumb, Button, Icon, Layout, Menu } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport React, { useState } from 'react';\r\nimport './App.scss';\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nconst App: React.FC = () => {\r\n  const [status, isMenuCollapsed] = useState(true);\r\n\r\n  const onMenuClick = () => {\r\n    isMenuCollapsed(!status);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Layout style={ { minHeight: '100vh' } }>\r\n        <Sider collapsible collapsed={ status } onCollapse={ onMenuClick } width={320}>\r\n          <div style={ { width: 320 } }>\r\n            <Button type=\"primary\" onClick={ onMenuClick } style={ { marginBottom: 16 } }>\r\n              <Icon type={ status ? 'menu-unfold' : 'menu-fold' } />\r\n            </Button>\r\n            <Menu\r\n              defaultSelectedKeys={ ['1'] }\r\n              // defaultOpenKeys={['sub1']}\r\n              mode=\"inline\"\r\n              theme=\"dark\"\r\n              inlineCollapsed={ status }\r\n            >\r\n              <Menu.Item key=\"1\">\r\n                <Icon type=\"pie-chart\" />\r\n                <span>Option 1</span>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"2\">\r\n                <Icon type=\"desktop\" />\r\n                <span>Option 2</span>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"3\">\r\n                <Icon type=\"inbox\" />\r\n                <span>Option 3</span>\r\n              </Menu.Item>\r\n              <SubMenu\r\n                key=\"sub1\"\r\n                title={\r\n                  <span>\r\n                <Icon type=\"mail\" />\r\n                <span>Navigation One</span>\r\n              </span>\r\n                }\r\n              >\r\n                <Menu.Item key=\"5\">Option 5</Menu.Item>\r\n                <Menu.Item key=\"6\">Option 6</Menu.Item>\r\n                <Menu.Item key=\"7\">Option 7</Menu.Item>\r\n                <Menu.Item key=\"8\">Option 8</Menu.Item>\r\n              </SubMenu>\r\n              <SubMenu\r\n                key=\"sub2\"\r\n                title={\r\n                  <span>\r\n                <Icon type=\"appstore\" />\r\n                <span>Navigation Two</span>\r\n              </span>\r\n                }\r\n              >\r\n                <Menu.Item key=\"9\">Option 9</Menu.Item>\r\n                <Menu.Item key=\"10\">Option 10</Menu.Item>\r\n                <SubMenu key=\"sub3\" title=\"Submenu\" >\r\n                  <Menu.Item key=\"11\">Option 11</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 13</Menu.Item>\r\n                </SubMenu>\r\n                <SubMenu key=\"sub3\" title=\"Very long submenu\" >\r\n                  <Menu.Item key=\"11\">Option 11</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                  <Menu.Item key=\"12\">Option 12</Menu.Item>\r\n                </SubMenu>\r\n              </SubMenu>\r\n            </Menu>\r\n          </div>\r\n        </Sider>\r\n        <Layout>\r\n          <Header style={ { background: '#fff', padding: 0 } } />\r\n          <Content style={ { margin: '0 16px' } }>\r\n            <Breadcrumb style={ { margin: '16px 0' } }>\r\n              <Breadcrumb.Item>User</Breadcrumb.Item>\r\n              <Breadcrumb.Item>Bill</Breadcrumb.Item>\r\n            </Breadcrumb>\r\n            <div style={ { padding: 24, background: '#fff', minHeight: 360 } }>Bill is a cat.</div>\r\n          </Content>\r\n          <Footer style={ { textAlign: 'center' } }>Ant Design Â©2018 Created by Ant UED</Footer>\r\n        </Layout>\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${ process.env.PUBLIC_URL }/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n  .register(swUrl)\r\n  .then(registration => {\r\n    registration.onupdatefound = () => {\r\n      const installingWorker = registration.installing;\r\n      if (installingWorker == null) {\r\n        return;\r\n      }\r\n      installingWorker.onstatechange = () => {\r\n        if (installingWorker.state === 'installed') {\r\n          if (navigator.serviceWorker.controller) {\r\n            // At this point, the updated precached content has been fetched,\r\n            // but the previous service worker will still serve the older\r\n            // content until all client tabs are closed.\r\n            console.log(\r\n              'New content is available and will be used when all ' +\r\n              'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n            );\r\n\r\n            // Execute callback\r\n            if (config && config.onUpdate) {\r\n              config.onUpdate(registration);\r\n            }\r\n          } else {\r\n            // At this point, everything has been precached.\r\n            // It's the perfect time to display a\r\n            // \"Content is cached for offline use.\" message.\r\n            console.log('Content is cached for offline use.');\r\n\r\n            // Execute callback\r\n            if (config && config.onSuccess) {\r\n              config.onSuccess(registration);\r\n            }\r\n          }\r\n        }\r\n      };\r\n    };\r\n  })\r\n  .catch(error => {\r\n    console.error('Error during service worker registration:', error);\r\n  });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n  .then(response => {\r\n    // Ensure service worker exists, and that we really are getting a JS file.\r\n    const contentType = response.headers.get('content-type');\r\n    if (\r\n      response.status === 404 ||\r\n      (contentType != null && contentType.indexOf('javascript') === -1)\r\n    ) {\r\n      // No service worker found. Probably a different app. Reload the page.\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister().then(() => {\r\n          window.location.reload();\r\n        });\r\n      });\r\n    } else {\r\n      // Service worker found. Proceed as normal.\r\n      registerValidSW(swUrl, config);\r\n    }\r\n  })\r\n  .catch(() => {\r\n    console.log(\r\n      'No internet connection found. App is running in offline mode.'\r\n    );\r\n  });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app/App';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst RoutedApp = () => (\r\n  <App/>\r\n);\r\n\r\nReactDOM.render(<RoutedApp />, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}