{"version":3,"sources":["app/components/Header/Header.tsx","app/components/SideMenu/SideMenu.tsx","app/constants/routes.ts","app/pages/homePage/HomePage.tsx","app/redux/constants.ts","app/redux/actions/index.ts","app/App.tsx","app/redux/actions/userActions.ts","serviceWorker.ts","app/redux/reducers/userDataReducer.ts","app/redux/reducers/index.ts","store.ts","index.tsx"],"names":["Header","props","className","type","shape","icon","size","onClick","onMenuClick","Item","to","SubMenu","Menu","menuItems","name","link","subItems","SideMenu","mode","inlineCollapsed","isMobileMenuView","isMenuCollapsed","style","marginLeft","renderMenu","options","map","option","key","title","renderMenuItem","HomePage","actions","GET_USER","CREATE_USER","UPDATE_USER","DELETE_USER","user","getUserData","data","payload","createAction","connect","state","mainStore","getUser","dispatch","a","async","console","log","userData","document","getElementsByTagName","clientWidth","useState","setIsMenuCollapsed","useEffect","stage","getElementById","mc","Hammer","on","exact","path","component","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","middleware","thunk","env","process","REACT_APP_NODE_ENV","push","logger","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02e2977b.chunk.js","sourcesContent":["import { Breadcrumb, Button, Icon } from 'antd';\r\nimport React from 'react';\r\nimport './Header.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface Header {\r\n  onMenuClick: () => void;\r\n}\r\n\r\nexport function Header(props: Header) {\r\n  return (\r\n    <div className='header'>\r\n      <Button type=\"primary\" shape=\"round\" icon=\"menu-fold\" size={ 'default' }\r\n              onClick={ props.onMenuClick } />\r\n      <Breadcrumb className='breadcrumb'>\r\n        <Breadcrumb.Item><Link to={'/'}><Icon type=\"home\" /></Link></Breadcrumb.Item>\r\n        <Breadcrumb.Item><Link to={'/'}><span>Приключения</span></Link></Breadcrumb.Item>\r\n        <Breadcrumb.Item><Link to={'/'}><span>Джадам</span></Link></Breadcrumb.Item>\r\n        <Breadcrumb.Item><Link to={'/'}><span>Персонаж</span></Link></Breadcrumb.Item>\r\n        <Breadcrumb.Item><Link to={'/'}><span>Гремми</span></Link></Breadcrumb.Item>\r\n        <Breadcrumb.Item><Link to={'/'}><span>О персонаже</span></Link></Breadcrumb.Item>\r\n        <Breadcrumb.Item><Link to={'/'}><span>Характеристики</span></Link></Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      {/*<Link to={ '/' }><img className='header__logo' src={ logo } alt=\"\" /></Link>*/ }\r\n      {/*<img className='header__userAvatar' src={ avatar } alt=\"\" />*/ }\r\n    </div>\r\n  );\r\n}\r\n","import { Icon, Menu } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as ROUTES from '../../constants/routes';\r\nimport './SideMenu.scss';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\ninterface SideMenu {\r\n  isMobileMenuView: boolean\r\n  isMenuCollapsed: boolean\r\n}\r\n\r\ninterface MenuItem {\r\n  name: string;\r\n  icon?: string;\r\n  link?: string;\r\n  subItems?: MenuItem[];\r\n}\r\n\r\nconst menuItems: MenuItem[] = [\r\n  {\r\n    icon: 'user', name: 'Аккаунт', link: ROUTES.SIGN_IN, subItems: [\r\n      { name: 'Вход' },\r\n      { name: 'Регистрация' },\r\n    ]\r\n  },\r\n  {\r\n    icon: 'crown', name: 'Приключения', subItems: [\r\n      {\r\n        name: 'Джадам', icon: 'crown', subItems: [\r\n          {\r\n            name: 'Список персонажей', icon: 'crown', subItems: [\r\n              {\r\n                name: 'Гремми', icon: 'crown', subItems: [\r\n                  {\r\n                    name: 'О персонаже', icon: 'crown', subItems: [\r\n                      { name: 'Характеристики' }\r\n                    ]\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  { icon: 'thunderbolt', name: 'Заклинания' }\r\n];\r\n\r\nexport const SideMenu = (props: SideMenu) => {\r\n  return (\r\n    <Menu className='side-menu'\r\n          mode=\"inline\"\r\n          inlineCollapsed={ props.isMobileMenuView ? false : props.isMenuCollapsed }\r\n          style={ props.isMobileMenuView && props.isMenuCollapsed ? { marginLeft: -240 } : { marginLeft: 0 } }>\r\n      { renderMenu(menuItems) }\r\n    </Menu>\r\n  );\r\n}\r\n\r\nconst renderMenuItem = (option: MenuItem) => {\r\n  return (\r\n    <Menu.Item key={ option.name }>\r\n      <Link to={ option.link || ROUTES.LANDING }>\r\n        { option.icon && <Icon type={ option.icon } /> }\r\n        <span>{ option.name }</span>\r\n      </Link>\r\n    </Menu.Item>\r\n  );\r\n};\r\n\r\nconst renderMenu = (options: MenuItem[]) => {\r\n  return options.map((option: MenuItem) => {\r\n    return option.subItems\r\n      ?\r\n      <SubMenu key={ option.name } title={\r\n        <span>\r\n          <Icon type={ option.icon } />\r\n          <span>{ option.name }</span>\r\n        </span>\r\n      }>\r\n        { renderMenu(option.subItems) }\r\n      </SubMenu>\r\n      :\r\n      renderMenuItem(option);\r\n  });\r\n};\r\n","export const LANDING = '/';\r\nexport const SIGN_UP = '/signup';\r\nexport const SIGN_IN = '/signin';\r\nexport const HOME = '/home';\r\nexport const ACCOUNT = '/account';\r\nexport const ADMIN = '/admin';\r\nexport const PASSWORD_FORGET = '/pw-forget';\r\n","import React from 'react';\r\n\r\nexport const HomePage = () => {\r\n  return (\r\n    <div>Content</div>\r\n  )\r\n}\r\n","export const actions = {\r\n  user: {\r\n    GET_USER: 'GET_USER',\r\n    CREATE_USER: 'CREATE_USER',\r\n    UPDATE_USER: 'UPDATE_USER',\r\n    DELETE_USER: 'DELETE_USER'\r\n  },\r\n\r\n\r\n\r\n\r\n  // samples\r\n  basic: {\r\n    ADD_QUESTION: 'ADD_QUESTION',\r\n    DELETE_QUESTION: 'DELETE_QUESTION',\r\n    DELETE_SKILL: 'DELETE_SKILL',\r\n    ADD_SKILL: 'ADD_SKILL',\r\n    REORDER_SKILLS: 'REORDER_SKILLS',\r\n    REORDER_QUESTIONS: 'REORDER_QUESTIONS',\r\n    ADD_COMMENT: 'ADD_COMMENT',\r\n    DELETE_COMMENT: 'DELETE_COMMENT',\r\n    UPDATE_COMMENT: 'UPDATE_COMMENT',\r\n    UPDATE_RATING: 'UPDATE_RATING',\r\n    CREATE_ALERT: 'CREATE_ALERT',\r\n    DELETE_ALERT: 'DELETE_ALERT',\r\n    RESET_CHECKLIST_VIEWER: 'RESET_CHECKLIST_VIEWER'\r\n  },\r\n  questions: {\r\n    FETCH_QUESTIONS_LIST: 'FETCH_QUESTIONS_LIST',\r\n    FETCH_QUESTION_INFO: 'FETCH_QUESTION_INFO',\r\n    FETCH_QUESTIONS: 'FETCH_QUESTIONS',\r\n    UPDATE_QUESTION: 'UPDATE_QUESTION',\r\n    CREATE_QUESTION: 'CREATE_QUESTION',\r\n    DELETE_QUESTION: 'DELETE_QUESTIONS',\r\n    IMPORT_QUESTION: 'IMPORT_QUESTIONS'\r\n  }\r\n};\r\n","import { actions } from '../constants';\r\n\r\nconst { user } = actions;\r\n\r\nconst createAction = (type: string, payload: any = null) => {\r\n  return {\r\n    type,\r\n    payload\r\n  };\r\n};\r\n\r\nexport const getUserData = (data: {name: string}) => createAction(user.GET_USER, data);\r\n","import 'antd/dist/antd.css';\r\nimport Hammer from 'hammerjs';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport { AppState } from '../store';\r\nimport './App.scss';\r\nimport { Header } from './components/Header/Header';\r\nimport { SideMenu } from './components/SideMenu/SideMenu';\r\nimport * as ROUTES from './constants/routes';\r\nimport { HomePage } from './pages/homePage/HomePage';\r\nimport { fetchUserData } from './redux/actions/userActions';\r\n\r\nconst App: React.FC = (props: any) => {\r\n  const bodyWidth = document.getElementsByTagName('body')[0].clientWidth;\r\n  // const bodyHeight = document.getElementsByTagName('body')[0].clientHeight;\r\n  const isMobileMenuView = bodyWidth <= 425;\r\n\r\n  const [isMenuCollapsed, setIsMenuCollapsed] = useState(true);\r\n\r\n  const onMenuClick = () => {\r\n    setIsMenuCollapsed(!isMenuCollapsed);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isMobileMenuView) {\r\n      const stage = document.getElementById('root') as HTMLElement;\r\n      const mc = new Hammer(stage);\r\n      mc.on('swipeleft', () => {\r\n        console.log('[swipe left]');\r\n        setIsMenuCollapsed(true);\r\n      });\r\n      mc.on('swiperight', () => {\r\n        console.log('[swipe right]');\r\n        setIsMenuCollapsed(false);\r\n      });\r\n    }\r\n    \r\n    props.getUser({ name: 'sasamba' });\r\n  }, []);\r\n\r\n  console.log('[store]:', props.mainStore);\r\n\r\n  return (\r\n    <Router>\r\n      <div className='app'>\r\n        <div className='app__header'>\r\n          <Header onMenuClick={ onMenuClick } />\r\n        </div>\r\n        <div className='app__content'>\r\n          <SideMenu isMobileMenuView={ isMobileMenuView } isMenuCollapsed={ isMenuCollapsed } />\r\n          <Route exact path={ ROUTES.LANDING } component={ HomePage } />\r\n        </div>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state: AppState) => ({\r\n    mainStore: state\r\n  }), {\r\n    getUser: fetchUserData\r\n  })(App);\r\n","import { Dispatch } from 'redux';\r\nimport { getUserData } from './index';\r\n\r\nexport const fetchUserData = (data: {name: string}) => async (dispatch: Dispatch) => {\r\n  console.log('[ActionData]:', data);\r\n  const userData: {name: string} = {\r\n    name: data.name,\r\n  };\r\n  dispatch(getUserData(userData));\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${ process.env.PUBLIC_URL }/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n  .register(swUrl)\r\n  .then(registration => {\r\n    registration.onupdatefound = () => {\r\n      const installingWorker = registration.installing;\r\n      if (installingWorker == null) {\r\n        return;\r\n      }\r\n      installingWorker.onstatechange = () => {\r\n        if (installingWorker.state === 'installed') {\r\n          if (navigator.serviceWorker.controller) {\r\n            // At this point, the updated precached content has been fetched,\r\n            // but the previous service worker will still serve the older\r\n            // content until all client tabs are closed.\r\n            console.log(\r\n              'New content is available and will be used when all ' +\r\n              'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n            );\r\n\r\n            // Execute callback\r\n            if (config && config.onUpdate) {\r\n              config.onUpdate(registration);\r\n            }\r\n          } else {\r\n            // At this point, everything has been precached.\r\n            // It's the perfect time to display a\r\n            // \"Content is cached for offline use.\" message.\r\n            console.log('Content is cached for offline use.');\r\n\r\n            // Execute callback\r\n            if (config && config.onSuccess) {\r\n              config.onSuccess(registration);\r\n            }\r\n          }\r\n        }\r\n      };\r\n    };\r\n  })\r\n  .catch(error => {\r\n    console.error('Error during service worker registration:', error);\r\n  });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n  .then(response => {\r\n    // Ensure service worker exists, and that we really are getting a JS file.\r\n    const contentType = response.headers.get('content-type');\r\n    if (\r\n      response.status === 404 ||\r\n      (contentType != null && contentType.indexOf('javascript') === -1)\r\n    ) {\r\n      // No service worker found. Probably a different app. Reload the page.\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister().then(() => {\r\n          window.location.reload();\r\n        });\r\n      });\r\n    } else {\r\n      // Service worker found. Proceed as normal.\r\n      registerValidSW(swUrl, config);\r\n    }\r\n  })\r\n  .catch(() => {\r\n    console.log(\r\n      'No internet connection found. App is running in offline mode.'\r\n    );\r\n  });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { actions } from '../constants';\r\n\r\nconst initialState: any = {};\r\n\r\nexport interface ActionReducer<T> {\r\n  type: string\r\n  payload: T\r\n}\r\n\r\nexport const userDataReducer = (state = initialState, action: ActionReducer<{name: string}>) => {\r\n  console.log('[ReducerAction]:', action);\r\n  const { GET_USER } = actions.user;\r\n  if (action.type === GET_USER) {\r\n    console.log('[ReducerActionPeyload]:', { ...action.payload });\r\n    return { ...action.payload };\r\n  } else return state;\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { userDataReducer } from './userDataReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  userData: userDataReducer,\r\n});\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './app/redux/reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\nconst env = process.env.REACT_APP_NODE_ENV;\r\n\r\nif (env && env === 'development') {\r\n  // @ts-ignore\r\n  middleware.push(logger);\r\n}\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(\r\n    applyMiddleware(...middleware)\r\n  )\r\n);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './app/App';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './store';\r\n\r\nconst RoutedApp = () => (\r\n  <Provider store={ store }>\r\n    <App />\r\n  </Provider>\r\n\r\n);\r\n\r\nReactDOM.render(<RoutedApp />, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}