{"version":3,"sources":["app/redux/constants.ts","app/redux/reducers/userDataReducer.ts","app/redux/reducers/windowDataReducer.ts","app/redux/reducers/index.ts","store.ts","app/redux/actions/index.ts","app/redux/actions/userActions.ts","app/pages/home/Home.tsx","app/pages/adventureCreate/AdventureCreate.tsx","app/routes.ts","app/api/firebase.ts","app/pages/adventureList/AdventureList.tsx","app/pages/characterView/characterInfoSection/characterGeneralInfo.tsx","app/pages/characterView/GameMenu/GameMenu.tsx","app/pages/characterView/characterInfoSection/helpers.ts","app/pages/characterView/characterInfoSection/characterAttributes.tsx","app/pages/characterView/characterInfoSection/characterExperience.tsx","app/pages/characterView/characterInfoSection/characterProficiency.tsx","app/pages/characterView/characterInfoSection/characterCombat.tsx","app/pages/characterView/characterEquipmentSection/characterEquipment.tsx","app/pages/characterView/CharacterView.tsx","app/pages/adventureView/contentItemPicker.tsx","app/pages/adventureView/AdventureView.tsx","app/pages/characterCreate/CharacterCreate.tsx","app/common/signInModal.tsx","app/common/sideMenu.tsx","app/App.tsx","app/redux/actions/windowActions.ts","index.tsx"],"names":["actions","SET_USER","GET_RESOLUTION","initialState","email","width","height","isMobile","isLandscape","rootReducer","combineReducers","userData","state","action","type","payload","windowData","middleware","thunk","env","process","REACT_APP_NODE_ENV","push","logger","store","createStore","composeWithDevTools","applyMiddleware","userActionTypes","windowActionTypes","createAction","setUserActionConverter","user","setUserAction","dispatch","a","displayName","emailVerified","photoURL","connect","setUser","props","bodyWidth","document","getElementsByTagName","clientWidth","bodyHeight","clientHeight","useEffect","className","onClick","alert","newAdventure","id","name","description","image","playersList","charactersList","itemsList","notes","customCounter","useState","playerEmail","setPlayerEmail","errorsList","setErrorsList","history","useHistory","currentErrors","onChange","event","target","value","placeholder","e","map","length","console","log","error","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","auth","provider","GoogleAuthProvider","firestore","addAdventure","collection","add","result","getAdventure","doc","get","character","data","adventuresList","setAdventuresList","then","adventures","docs","title","currentUserEmail","currentUser","set","catch","setAdventure","isDungeonMaster","icon","PlusOutlined","adventure","hoverable","key","cover","alt","src","undefined","to","RightCircleOutlined","renderAdventureCard","CharacterGeneralInfoSection","info","style","objectFit","objectPosition","imageUrl","showHeader","pagination","columns","dataIndex","dataSource","characterName","subRace","sex","age","human","weight","background","generalInfoMenuTabs","caption","journalMenuTabs","equipmentMenuTabs","abilitiesMenuTabs","renderSubmenu","tabs","tab","Item","setCharacterViewTab","children","portraitMenu","overlay","isDisabled","disabled","overlayStyle","flexDirection","calculateAttributeBonus","Math","round","CharacterAttributesSection","attributes","skills","size","render","skillsProficiency","skill","color","count","strength","bonus","Athletics","dexterity","Acrobatics","SleightOfHand","Stealth","constitution","Endurance","intelligence","Investigation","History","Arcana","Nature","Religion","wisdom","Perception","Survival","Medicine","Insight","AnimalHandling","charisma","Performance","Intimidation","Deception","Persuasion","CharacterExperienceSection","classes","characterClass","level","feats","feat","experience","inspiration","CharacterProficiencySection","proficiency","display","flexWrap","marginBottom","languages","tools","weapons","armor","CharacterCombatSection","stats","effects","armorClass","initiative","speed","darkVision","hitPoints","max","temp","current","deathSaves","successes","failures","args","savingThrows","resistance","immunity","TextArea","Input","CharacterEquipmentSection","equipment","isButtonOpen","setIsButtonOpen","onFinish","values","nextAdventure","newItem","cost","en","ru","rarity","docName","onFinishFailed","errors","rules","required","message","autoSize","htmlType","sorter","b","SendOutlined","DeleteOutlined","expandedRowRender","record","trunc","item","CharacterView","currentTab","setCurrentTab","overflow","generalInfo","about","combat","renderTab","ContentItemPicker","initialStep","currentstep","setCurrentStep","currentItem","setCurrentItem","content","addButton","itemPicker","element","customItem","adventureId","match","params","gridParams","widthContainersCount","heightContainersCount","itemHeight","itemWidth","maxContainersCount","countGridParams","response","renderContentWrap","justifyContent","containersArray","i","renderGrid","setState","SignInModal","visible","isOpened","onOk","onCancel","onClose","footer","password","createUserWithEmailAndPassword","code","signInWithEmailAndPassword","SignInEmail","min","Password","Tooltip","signInWithPopup","SideMenu","isMenuCollapsed","setIsMenuCollapsed","setcurrentUserEmail","location","useLocation","onAuthStateChanged","renderMenuItem","route","pathname","text","renderMenuList","BookOutlined","UserOutlined","split","signOut","onSignInButtonClick","checked","isMenuOpened","onKeyDown","setWindow","documentElement","setProperty","body","resolution","vh","window","innerHeight","setIsMenuOpened","isSignInModalOpened","setIsSignInModalOpened","header","onResize","onresize","exact","path","component","Home","AdventureList","AdventureCreate","AdventureView","CharacterCreate","RoutedApp","basename","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.835b13ee.chunk.js","sourcesContent":["export const actions = {\r\n  userActionTypes: {\r\n    SET_USER: 'SET_USER'\r\n  },\r\n  windowActionTypes: {\r\n    GET_RESOLUTION: 'GET_RESOLUTION'\r\n  },\r\n\r\n\r\n\r\n\r\n  // samples\r\n  basic: {\r\n    ADD_QUESTION: 'ADD_QUESTION',\r\n    DELETE_QUESTION: 'DELETE_QUESTION',\r\n    DELETE_SKILL: 'DELETE_SKILL',\r\n    ADD_SKILL: 'ADD_SKILL',\r\n    REORDER_SKILLS: 'REORDER_SKILLS',\r\n    REORDER_QUESTIONS: 'REORDER_QUESTIONS',\r\n    ADD_COMMENT: 'ADD_COMMENT',\r\n    DELETE_COMMENT: 'DELETE_COMMENT',\r\n    UPDATE_COMMENT: 'UPDATE_COMMENT',\r\n    UPDATE_RATING: 'UPDATE_RATING',\r\n    CREATE_ALERT: 'CREATE_ALERT',\r\n    DELETE_ALERT: 'DELETE_ALERT',\r\n    RESET_CHECKLIST_VIEWER: 'RESET_CHECKLIST_VIEWER'\r\n  },\r\n  questions: {\r\n    FETCH_QUESTIONS_LIST: 'FETCH_QUESTIONS_LIST',\r\n    FETCH_QUESTION_INFO: 'FETCH_QUESTION_INFO',\r\n    FETCH_QUESTIONS: 'FETCH_QUESTIONS',\r\n    UPDATE_QUESTION: 'UPDATE_QUESTION',\r\n    CREATE_QUESTION: 'CREATE_QUESTION',\r\n    DELETE_QUESTION: 'DELETE_QUESTIONS',\r\n    IMPORT_QUESTION: 'IMPORT_QUESTIONS'\r\n  }\r\n};\r\n","import { ActionReducer, PlayerAccount } from \"../../types/General\";\r\nimport { actions } from \"../constants\";\r\n\r\nconst initialState: PlayerAccount = {\r\n    email: ''\r\n  };\r\n  \r\n  export const userDataReducer: (state: PlayerAccount, action: ActionReducer<PlayerAccount>) => PlayerAccount = (state = initialState, action) => {\r\n    const { SET_USER } = actions.userActionTypes;\r\n  \r\n    if (action.type === SET_USER) {\r\n      return { ...action.payload };\r\n    } else return state;\r\n  };","import { ActionReducer } from \"../../types/General\";\r\nimport { actions } from \"../constants\";\r\n\r\ninterface ClientWindowResolution {\r\n    width: number;\r\n    height: number;\r\n    isMobile: boolean;\r\n    isLandscape: boolean;\r\n}\r\n\r\nconst initialState: ClientWindowResolution = {\r\n    width: 0,\r\n    height: 0,\r\n    isMobile: false,\r\n    isLandscape: false\r\n}\r\n\r\nexport const windowDataReducer: (state: ClientWindowResolution, action: ActionReducer<ClientWindowResolution>) => ClientWindowResolution = (state = initialState, action) => {\r\n    const { GET_RESOLUTION } = actions.windowActionTypes\r\n\r\n    if (action.type === GET_RESOLUTION) {\r\n        return { ...action.payload }\r\n    } else return state\r\n}","import { combineReducers } from 'redux';\r\nimport { userDataReducer } from './userDataReducer';\r\nimport { windowDataReducer } from './windowDataReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    userData: userDataReducer,\r\n    windowData: windowDataReducer,\r\n});\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './app/redux/reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\nconst env = process.env.REACT_APP_NODE_ENV;\r\n\r\nif (env && env === 'development') {\r\n  // @ts-ignore\r\n  middleware.push(logger);\r\n}\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(\r\n    applyMiddleware(...middleware)\r\n  )\r\n);\r\n","import { ClientWindowResolution, PlayerAccount } from '../../types/General';\r\nimport { actions } from '../constants';\r\n\r\nconst { userActionTypes, windowActionTypes } = actions;\r\n\r\nconst createAction = (type: string, payload: any = null) => {\r\n  return {\r\n    type,\r\n    payload\r\n  };\r\n};\r\n\r\nexport const setUserActionConverter = (user: PlayerAccount) => createAction(userActionTypes.SET_USER, user);\r\nexport const setWindowActionConverter = (resolution: ClientWindowResolution) => createAction(windowActionTypes.GET_RESOLUTION, resolution);\r\n","import { Dispatch } from 'redux';\r\nimport { PlayerAccount } from '../../types/General';\r\nimport { setUserActionConverter } from './index';\r\n\r\nexport const setUserAction: (user: PlayerAccount) => (dispatch: Dispatch) => Promise<void> = (user) => async (dispatch) => {\r\n  const userData: PlayerAccount = {\r\n    displayName: user.displayName,\r\n    email: user.email,\r\n    emailVerified: user.emailVerified,\r\n    photoURL: user.photoURL\r\n  };\r\n  dispatch(setUserActionConverter(userData));\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from '../../../store';\r\nimport './Home.sass';\r\nimport { setUserAction } from '../../redux/actions/userActions';\r\nimport { PlayerAccount } from '../../types/General';\r\n\r\ninterface Home {\r\n  userData: PlayerAccount,\r\n  setUser: (user: PlayerAccount) => void\r\n}\r\n\r\nexport const Home = (props: Home) => {\r\n  const bodyWidth = document.getElementsByTagName('body')[0].clientWidth;\r\n  const bodyHeight = document.getElementsByTagName('body')[0].clientHeight;\r\n\r\n  useEffect(() => {\r\n    // getAdventure('G9MSzXmwTIe16ttfHEv3').then(adventure => {\r\n    //   console.log(adventure)      \r\n    // })\r\n  })\r\n\r\n  return (\r\n    <div className='home'>\r\n      <button onClick={() => alert(props.userData.email)}>Alert user data email from store</button>\r\n      <button onClick={() => alert(bodyWidth)}>Show client width</button>\r\n      <button onClick={() => alert(bodyHeight)}>Show client height</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect((state: AppState) => ({\r\n  userData: state.userData\r\n}), {\r\n  setUser: setUserAction\r\n})(Home)\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { Adventure } from '../../types/adventure';\r\nimport * as ROUTES from '../../routes';\r\nimport './AdventureCreate.sass';\r\n\r\nconst newAdventure: Adventure = {\r\n  id: '',\r\n  name: '',\r\n  description: '',\r\n  image: '',\r\n  playersList: [],\r\n  charactersList: [],\r\n  itemsList:[],\r\n  notes: [],\r\n  customCounter: 1,\r\n};\r\n\r\nconst AdventureCreate = () => {\r\n  const [playerEmail, setPlayerEmail] = useState('');\r\n  const [errorsList, setErrorsList] = useState(['']);\r\n  const history = useHistory();\r\n  const currentErrors: string[] = [];\r\n\r\n  const validation = () => {\r\n    if (newAdventure.name.length === 0) currentErrors.push('Adventure name should not be empty');\r\n    if (newAdventure.playersList.length === 0) currentErrors.push('Players list should not be empty');\r\n    setErrorsList(currentErrors);\r\n    console.log('[currentErrors]:', currentErrors);\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    validation();\r\n    if (currentErrors.length === 0) {\r\n      history.push(ROUTES.ADVENTURE);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='adventure-create'>\r\n      <span>Название приключения*</span>\r\n      <input onChange={ (event => newAdventure.name = event.target.value) } />\r\n      <span>Описание приключения</span>\r\n      <textarea onChange={ (event => newAdventure.description = event.target.value) } />\r\n      <span>Картинка приключения</span>\r\n      <input placeholder='url' onChange={ (event => newAdventure.image = event.target.value) } />\r\n      <span>Добавить игрока</span>\r\n      <div>\r\n        <input placeholder='email' value={ playerEmail } onChange={ (e) => {setPlayerEmail(e.target.value);} } />\r\n        <button onClick={ () => {\r\n          setPlayerEmail('');\r\n        } }>Добавить\r\n        </button>\r\n      </div>\r\n      <h4>Игроки*:</h4>\r\n      { newAdventure.playersList.map(email => <span>{ email }</span>) }\r\n      <h4>Dungeon Master*:</h4>\r\n      { newAdventure.playersList[0] }\r\n      <button onClick={ onSubmit }>Создать приключение</button>\r\n      <span>Errors:</span>\r\n      { errorsList.map(error => <span>{ error }</span>) }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, null)(AdventureCreate);\r\n","export const ROOT = '/';\r\n\r\nexport const ADVENTURE = '/adventure';\r\nexport const ADVENTURE_VIEW = '/adventure/:id';\r\nexport const ADVENTURE_SETTINGS = '/adventure/:id/settings';\r\nexport const ADVENTURE_CREATE = '/adventure/create'; // change to ADVENTURE_SETTINGS\r\n\r\nexport const CHARACTER_VIEW_TEMP = '/adventure/:id/character/:id';\r\nexport const CHARACTER_ADD_TEMP = '/adventure/:id/character/add';\r\n\r\nexport const GAME = '/game';\r\nexport const CHARACTER_CREATE = '/game/adventure/view/:id/character/create';\r\nexport const CHARACTER_VIEW = '/game/adventure/view/:id/character/view/:id';","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport { Adventure } from '../types/adventure';\r\nimport { Character } from '../types/adventure/character';\r\n\r\nconst config = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\r\n};\r\n\r\nfirebase.initializeApp(config);\r\nexport const auth: firebase.auth.Auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nconst firestore = firebase.firestore();\r\n\r\n// Autorization\r\nexport const SignUpEmail = (email: string, password: string) => {\r\n  return auth\r\n    .createUserWithEmailAndPassword(email, password)\r\n    .catch((e) => {\r\n      console.log(e);\r\n      // alert(e);\r\n      return e\r\n    });\r\n};\r\n\r\nexport const SignInEmail = (email: string, password: string) => {\r\n  return auth\r\n    .signInWithEmailAndPassword(email, password)\r\n    .catch((e) => {\r\n      console.log(e);\r\n      // alert(e);\r\n      return e\r\n    });\r\n};\r\n\r\nexport const SignInGoogleAccount = () => {\r\n\r\n  return auth\r\n    .signInWithPopup(provider)\r\n    .catch((e) => {\r\n      console.log(e);\r\n      alert(e);\r\n      return e\r\n    });\r\n\r\n}\r\n\r\n// Adventures\r\nexport const addAdventure: () => Promise<string> = async () => {\r\n  const result = await firestore.collection('adventures').add({});\r\n  return result.id\r\n}\r\n\r\nexport const setAdventure: (id: string, data: Adventure) => Promise<void> = (id, data) => {\r\n  return firestore.collection('adventures').doc(id).set(data).catch(error => {\r\n    console.log(error);\r\n  })\r\n}\r\n\r\nexport const getAdventure: (id: string) => Promise<Adventure | undefined> = async (id) => {\r\n  const character = await firestore.collection('adventures').doc(id).get();\r\n  return character.data() as Adventure;\r\n}\r\n\r\nexport const deleteAdventure: (id: string) => Promise<void> = (id) => {\r\n  return firestore.collection('adventures').doc(id).delete().catch(error => {\r\n    console.log(error);\r\n  })\r\n}\r\n\r\nexport const GetAllUserAdventures: () => Promise<Adventure[]> = () => {\r\n  return firestore\r\n    .collection('adventures')\r\n    .get()\r\n    .then(adventures => {\r\n      return adventures.docs.map(doc => {\r\n        return doc.data() as Adventure;\r\n      })\r\n    })\r\n};\r\n\r\nexport const setAdventureToDB = (docName: string, data: Adventure) => {\r\n  console.log(data)\r\n  firestore\r\n    .collection('adventures')\r\n    .doc(docName)\r\n    .set(data)\r\n}\r\n\r\n// Characters\r\nexport const getCharacter: (docName: string) => Promise<Character | undefined> = async (docName) => {\r\n  const character = await firestore\r\n    .collection('playerCharacters')\r\n    .doc(docName)\r\n    .get();\r\n  return character.data() as Character;\r\n}\r\n\r\nexport const setCharacterToDB = (docName: string, data: Character) => {\r\n  firestore\r\n    .collection('playerCharacters')\r\n    .doc(docName)\r\n    .set(data)\r\n}\r\n\r\nexport const getAllChars = () => {\r\n  return firestore\r\n    .collection('playerCharacters')\r\n    .get()\r\n    .then((characters) => {\r\n      return characters.docs.map((doc) => {\r\n        return doc.data() as Character;\r\n      });\r\n    });\r\n};\r\n\r\nexport default firebase;\r\n","import { Button, Card, PageHeader } from 'antd';\r\nimport Meta from 'antd/lib/card/Meta';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { addAdventure, auth, GetAllUserAdventures, setAdventure } from '../../api/firebase';\r\nimport { Adventure } from '../../types/adventure';\r\nimport './AdventureList.sass';\r\nimport { ADVENTURE } from '../../routes';\r\nimport { PlusOutlined, RightCircleOutlined } from '@ant-design/icons';\r\n\r\nexport const AdventureList = () => {\r\n  const [adventuresList, setAdventuresList] = useState<Adventure[]>([]);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    GetAllUserAdventures().then((adventures: Adventure[]) => {\r\n      console.log('adventures', adventures)\r\n      setAdventuresList(adventures);\r\n    });\r\n  }, [])\r\n\r\n  const onAddButtonClick = () => {\r\n    const currentUserEmail = auth.currentUser?.email;\r\n    if (currentUserEmail === 'nunky.balthazar@gmail.com') {\r\n      addAdventure().then(id => {\r\n        const initialAdventure: Adventure = {\r\n          id: id,\r\n          name: id,\r\n          playersList: [{\r\n            email: currentUserEmail,\r\n            isDungeonMaster: true,\r\n          }],\r\n          customCounter: 0,\r\n          charactersList: [],\r\n          itemsList: [],\r\n          notes: [],\r\n        }\r\n        setAdventure(id, initialAdventure).then(() => {\r\n          history.push(`/adventure/${id}/settings`);\r\n        })\r\n      });\r\n    } else alert('no access');\r\n  }\r\n\r\n  const renderAdventureCard = (adventure: Adventure) => {\r\n    return <Card\r\n      hoverable\r\n      key={adventure.id}\r\n      className={'adventure-item'}\r\n      cover={adventure.image ? <img className={'adventure-item__image'} alt=\"adventure\" src={adventure.image} /> : undefined}\r\n      actions={[\r\n        <Button><Link to={`${ADVENTURE}/${adventure.id}`}>Войти <RightCircleOutlined key={'enter'} /></Link></Button>\r\n      ]}\r\n    >\r\n      <Meta\r\n        title={adventure.name}\r\n        description={<div className={'adventure-item__description'}>\r\n          {adventure.description}\r\n        </div>}\r\n      />\r\n    </Card>\r\n  }\r\n\r\n  return (<>\r\n    <div className=\"adventure-header\">\r\n      <PageHeader\r\n        className=\"site-page-header\"\r\n        title=\"Приключения\"\r\n      />\r\n      <Button onClick={onAddButtonClick} className={'adventure-header__add-button'} icon={<PlusOutlined />} />\r\n    </div>\r\n    <div className='adventure-list'>\r\n      {adventuresList.map(adventure => renderAdventureCard(adventure))}\r\n    </div>\r\n  </>);\r\n};\r\n\r\nexport default connect(null, null)(AdventureList);\r\n","import { Table } from \"antd\"\r\nimport React from \"react\"\r\nimport { CharacterInfo, CharacterDescription } from \"../../../types/adventure/character\"\r\n\r\ninterface CharacterGeneralInfoSectionProps {\r\n    info: CharacterInfo\r\n    description: CharacterDescription\r\n}\r\n\r\nexport const CharacterGeneralInfoSection: React.FC<CharacterGeneralInfoSectionProps> = ({ info, description }) => {\r\n    return <>\r\n        <img style={{ width: '100%', height: 100, objectFit: 'cover', objectPosition: '50% 25%' }} src={description.imageUrl} alt=\"\" />\r\n        <Table\r\n            title={() => 'Основная информация'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '100%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                    // render: (text: React.ReactNode) => <a>text</a>\r\n                },\r\n                {\r\n                    title: 'value',\r\n                    dataIndex: 'value',\r\n                    key: 'value',\r\n                }\r\n            ]}\r\n            dataSource={[\r\n                {\r\n                    key: 'playerName',\r\n                    name: 'Имя игрока',\r\n                    value: 'Owner'\r\n                },\r\n                {\r\n                    key: 'characterName',\r\n                    name: 'Имя персонажа',\r\n                    value: info.characterName\r\n                },\r\n                {\r\n                    key: '1',\r\n                    name: 'Расса (подвид)',\r\n                    value: info.subRace\r\n                },\r\n                {\r\n                    key: '2',\r\n                    name: 'Пол',\r\n                    value: description.sex\r\n                },\r\n                {\r\n                    key: '3',\r\n                    name: 'Возраст',\r\n                    value: description.age.human\r\n                },\r\n                {\r\n                    key: '4',\r\n                    name: 'Рост',\r\n                    value: description.height\r\n                },\r\n                {\r\n                    key: '5',\r\n                    name: 'Вес',\r\n                    value: description.weight\r\n                },\r\n                {\r\n                    key: '6',\r\n                    name: 'Предистория',\r\n                    value: info.background\r\n                },\r\n            ]}\r\n        />\r\n    </>\r\n}","import { connect } from 'react-redux';\r\nimport React, { SetStateAction } from 'react';\r\nimport './GameMenu.sass'\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\r\nimport WhatshotIcon from '@material-ui/icons/Whatshot';\r\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\r\nimport { Menu, Dropdown, Button } from 'antd';\r\nimport { CharacterViewTabName } from '../CharacterView';\r\nimport { ClientWindowResolution } from '../../../types/General';\r\n\r\nconst generalInfoMenuTabs: menuTab[] = [\r\n    { name: 'generalInfo', caption: 'О персонаже' },\r\n    { name: 'attributes', caption: 'Характеристики' },\r\n    { name: 'experience', caption: 'Класс и опыт' },\r\n    { name: 'proficiency', caption: 'Владение' },\r\n    { name: 'combat', caption: 'Боевые параметры' },\r\n];\r\n\r\nconst journalMenuTabs: menuTab[] = [\r\n    { name: 'generalInfo', caption: 'Время' },\r\n    { name: 'generalInfo', caption: 'Заметки' },\r\n    { name: 'generalInfo', caption: 'Квесты' },\r\n    { name: 'generalInfo', caption: 'Персонажи' },\r\n    { name: 'generalInfo', caption: 'Лог' },\r\n];\r\n\r\nconst equipmentMenuTabs: menuTab[] = [\r\n    { name: 'equipment', caption: 'Экипировка' },\r\n];\r\n\r\nconst abilitiesMenuTabs: menuTab[] = [\r\n    { name: 'generalInfo', caption: 'Способности' },\r\n    { name: 'generalInfo', caption: 'Навыки' },\r\n    { name: 'generalInfo', caption: 'Умения' },\r\n    { name: 'generalInfo', caption: 'Ритуалы' },\r\n    { name: 'generalInfo', caption: 'Заклинания' },\r\n];\r\n\r\ninterface GameMenuProps {\r\n    windowData: ClientWindowResolution;\r\n    setCharacterViewTab: React.Dispatch<SetStateAction<CharacterViewTabName>>;\r\n}\r\n\r\ninterface menuTab {\r\n    name: CharacterViewTabName;\r\n    caption: string;\r\n}\r\n\r\nconst GameMenu = (props: GameMenuProps) => {\r\n    // const { isLandscape, isMobile } = props.windowData;\r\n    const { isLandscape } = props.windowData;\r\n\r\n    const renderSubmenu = (tabs: menuTab[]) =>\r\n        <Menu className={'submenu'}>\r\n            {tabs.map((tab: menuTab) =>\r\n                <Menu.Item key={tab.name} onClick={() => props.setCharacterViewTab(tab.name)} children={tab.caption} />)\r\n            }\r\n        </Menu>\r\n\r\n    const portraitMenu = (key: string, overlay: JSX.Element, icon: JSX.Element, isDisabled?: boolean) => (\r\n        <Dropdown disabled={isDisabled} key={key} overlay={overlay} overlayStyle={isLandscape ? {} : { width: '100%' }}>\r\n            <Button className={'game-menu__button'} children={icon} />\r\n        </Dropdown>\r\n    )\r\n\r\n    return (\r\n        // <div\r\n        //     className={'game-menu'}\r\n        //     style={(isLandscape && !isMobile)\r\n        //         ? { width: 180, flexDirection: 'column', justifyContent: 'space-between' }\r\n        //         : { height: 60, flexDirection: 'row' }\r\n        //     }>\r\n        //     {(isLandscape && !isMobile)\r\n        //         ? (<>\r\n        //             {renderSubmenu(generalInfoMenuTabs)}\r\n        //             {renderSubmenu(journalMenuTabs)}\r\n        //             {renderSubmenu(equipmentMenuTabs)}\r\n        //             {renderSubmenu(abilitiesMenuTabs)}\r\n        //             {/* TODO: add favorites sections */}\r\n        //         </>)\r\n        //         : (<>\r\n        //             {portraitMenu('generalInfoMenu', renderSubmenu(generalInfoMenuTabs), <FaceIcon />)}\r\n        //             {portraitMenu('journalMenuTabs', renderSubmenu(journalMenuTabs), <MenuBookIcon />, true)}\r\n        //             {portraitMenu('equipmentMenuTabs', renderSubmenu(equipmentMenuTabs), <AccountBalanceWalletIcon />)}\r\n        //             {portraitMenu('abilitiesMenuTabs', renderSubmenu(abilitiesMenuTabs), <WhatshotIcon />, true)}\r\n        //             {/* TODO: add favorites sections <FavoriteBorderIcon /> */}\r\n        //         </>)\r\n        //     }\r\n        // </div>\r\n        <div\r\n            className={'game-menu'}\r\n            style={{ height: 60, flexDirection: 'row' }}>\r\n            <>\r\n                {portraitMenu('generalInfoMenu', renderSubmenu(generalInfoMenuTabs), <FaceIcon />)}\r\n                {portraitMenu('journalMenuTabs', renderSubmenu(journalMenuTabs), <MenuBookIcon />, true)}\r\n                {portraitMenu('equipmentMenuTabs', renderSubmenu(equipmentMenuTabs), <AccountBalanceWalletIcon />)}\r\n                {portraitMenu('abilitiesMenuTabs', renderSubmenu(abilitiesMenuTabs), <WhatshotIcon />, true)}\r\n                {/* TODO: add favorites sections <FavoriteBorderIcon /> */}\r\n            </>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(null, null)(GameMenu);","export const calculateAttributeBonus = (value: number) => {\r\n    return Math.round((value - 0.5) / 2 - 5)\r\n}","import { Table } from \"antd\"\r\nimport React from \"react\"\r\nimport { CharacterAttributes, SkillsProficiency } from \"../../../types/adventure/character\"\r\nimport { calculateAttributeBonus } from \"./helpers\"\r\n\r\ninterface CharacterAttributesSectionProps {\r\n    attributes: CharacterAttributes,\r\n    skills: SkillsProficiency,\r\n}\r\n\r\nexport const CharacterAttributesSection: React.FC<CharacterAttributesSectionProps> = ({ attributes, skills }) => {\r\n    return <>\r\n        <Table\r\n            title={() => 'Характеристики'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '100%' }}\r\n            size={'small'}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                    // render: (text: React.ReactNode) => <a>text</a>\r\n                },\r\n                {\r\n                    title: 'Count',\r\n                    dataIndex: 'count',\r\n                    key: 'count',\r\n                },\r\n                {\r\n                    title: 'Bonus',\r\n                    dataIndex: 'bonus',\r\n                    key: 'bonus',\r\n                },\r\n                {\r\n                    title: 'Skills',\r\n                    dataIndex: 'skills',\r\n                    key: 'skills',\r\n                    render: (skillsProficiency: { name: string, value: boolean }[]) => {\r\n                        return skillsProficiency.map((skill) => {\r\n                            return <div style={{color: skill.value ? 'green' : ''}}>{skill.name}</div>\r\n                        })\r\n                    }\r\n                }\r\n            ]}\r\n            dataSource={[\r\n                {\r\n                    key: '1',\r\n                    name: 'Сила',\r\n                    count: attributes.strength,\r\n                    bonus: calculateAttributeBonus(attributes.strength),\r\n                    skills: [\r\n                        { name: 'Атлетика', value: skills.Athletics }\r\n                    ]\r\n                },\r\n                {\r\n                    key: '2',\r\n                    name: 'Ловкость',\r\n                    count: attributes.dexterity,\r\n                    bonus: calculateAttributeBonus(attributes.dexterity),\r\n                    skills: [\r\n                        { name: 'Акробатика', value: skills.Acrobatics },\r\n                        { name: 'Ловкость рук', value: skills.SleightOfHand },\r\n                        { name: 'Скрытность', value: skills.Stealth }\r\n                    ]\r\n                },\r\n                {\r\n                    key: '3',\r\n                    name: 'Телосложение',\r\n                    count: attributes.constitution,\r\n                    bonus: calculateAttributeBonus(attributes.constitution),\r\n                    skills: [\r\n                        { name: 'Выносливость', value: skills.Endurance }\r\n                    ]\r\n                },\r\n                {\r\n                    key: '4',\r\n                    name: 'Интеллект',\r\n                    count: attributes.intelligence,\r\n                    bonus: calculateAttributeBonus(attributes.intelligence),\r\n                    skills: [\r\n                        { name: 'Анализ', value: skills.Investigation },\r\n                        { name: 'История', value: skills.History },\r\n                        { name: 'Магия', value: skills.Arcana },\r\n                        { name: 'Природа', value: skills.Nature },\r\n                        { name: 'Религия', value: skills.Religion }\r\n                    ]\r\n                },\r\n                {\r\n                    key: '5',\r\n                    name: 'Мудрость',\r\n                    count: attributes.wisdom,\r\n                    bonus: calculateAttributeBonus(attributes.wisdom),\r\n                    skills: [\r\n                        { name: 'Внимательность', value: skills.Perception },\r\n                        { name: 'Выживание', value: skills.Survival },\r\n                        { name: 'Медицина', value: skills.Medicine },\r\n                        { name: 'Проницательность', value: skills.Insight },\r\n                        { name: 'Уход за животными', value: skills.AnimalHandling },\r\n                    ]\r\n                },\r\n                {\r\n                    key: '6',\r\n                    name: 'Харизма',\r\n                    count: attributes.charisma,\r\n                    bonus: calculateAttributeBonus(attributes.charisma),\r\n                    skills: [\r\n                        { name: 'Выступление', value: skills.Performance },\r\n                        { name: 'Запугивание', value: skills.Intimidation },\r\n                        { name: 'Обман', value: skills.Deception },\r\n                        { name: 'Убеждение', value: skills.Persuasion },\r\n                    ]\r\n                },\r\n            ]}\r\n        />\r\n    </>\r\n}","import { Table } from \"antd\"\r\nimport React from \"react\"\r\nimport { CharacterAction, CharacterClass, CharacterInfo } from \"../../../types/adventure/character\"\r\n\r\ninterface CharacterExperienceSectionProps {\r\n    classes: CharacterClass[];\r\n    action: CharacterAction;\r\n    info: CharacterInfo;\r\n}\r\n\r\nexport const CharacterExperienceSection: React.FC<CharacterExperienceSectionProps> = ({ classes, action, info }) => {\r\n    return <>\r\n        <Table\r\n            title={() => 'Класс'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '100%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                    // render: (text: React.ReactNode) => <a>text</a>\r\n                },\r\n                {\r\n                    title: 'Level',\r\n                    dataIndex: 'level',\r\n                    key: 'level',\r\n                }\r\n            ]}\r\n            dataSource={classes.map((characterClass) => {\r\n                return {\r\n                    key: characterClass.name,\r\n                    name: characterClass.name,\r\n                    level: characterClass.level\r\n                }\r\n            })}\r\n        />\r\n        <Table\r\n            title={() => 'Черты'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '100%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                    // render: (text: React.ReactNode) => <a>text</a>\r\n                },\r\n            ]}\r\n            dataSource={info.feats.length\r\n                ? info.feats.map((feat) => {\r\n                    return {\r\n                        key: feat,\r\n                        name: feat\r\n                    }\r\n                })\r\n                : [{\r\n                    key: 'feat',\r\n                    name: 'Нет'\r\n                }]\r\n            }\r\n        />\r\n\r\n        <Table\r\n            title={() => 'Другое'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '100%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                    // render: (text: React.ReactNode) => <a>text</a>\r\n                },\r\n                {\r\n                    title: 'Value',\r\n                    dataIndex: 'value',\r\n                    key: 'value',\r\n                }\r\n            ]}\r\n            dataSource={[\r\n                {\r\n                    key: 'exp',\r\n                    name: 'Опыт',\r\n                    value: action.experience\r\n                },\r\n                {\r\n                    key: 'bonus',\r\n                    name: 'Бонус мастерства',\r\n                    value: action.bonus\r\n                },\r\n                {\r\n                    key: 'inspiration',\r\n                    name: 'Вдохновение',\r\n                    value: action.inspiration ? 'Есть' : 'Нет'\r\n                },\r\n            ]}\r\n        />\r\n    </>\r\n}","import { Table } from \"antd\"\r\nimport React from \"react\"\r\nimport { CharacterProficiency } from \"../../../types/adventure/character\"\r\n\r\ninterface CharacterProficiencySectionProps {\r\n    proficiency: CharacterProficiency;\r\n}\r\n\r\nexport const CharacterProficiencySection: React.FC<CharacterProficiencySectionProps> = ({ proficiency }) => {\r\n    return <div style={{display: 'flex', flexWrap: 'wrap'}}>\r\n        <Table\r\n            title={() => 'Языки'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '50%', marginBottom: 16}}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                }\r\n            ]}\r\n            dataSource={proficiency.languages.length\r\n                ? proficiency.languages.map((value) => {\r\n                    return {\r\n                        key: value,\r\n                        name: value\r\n                    }\r\n                })\r\n                : [{\r\n                    key: 'feat',\r\n                    name: 'Нет'\r\n                }]\r\n            }\r\n        />\r\n        <Table\r\n            title={() => 'Инструменты'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '50%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                }\r\n            ]}\r\n            dataSource={proficiency.tools.length\r\n                ? proficiency.tools.map((value) => {\r\n                    return {\r\n                        key: value,\r\n                        name: value\r\n                    }\r\n                })\r\n                : [{\r\n                    key: 'feat',\r\n                    name: 'Нет'\r\n                }]\r\n            }\r\n        />\r\n        <Table\r\n            title={() => 'Оружие'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '50%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                }\r\n            ]}\r\n            dataSource={proficiency.weapons.length\r\n                ? proficiency.weapons.map((value) => {\r\n                    return {\r\n                        key: value,\r\n                        name: value\r\n                    }\r\n                })\r\n                : [{\r\n                    key: 'feat',\r\n                    name: 'Нет'\r\n                }]\r\n            }\r\n        />\r\n        <Table\r\n            title={() => 'Доспехи'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '50%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                }\r\n            ]}\r\n            dataSource={proficiency.armor.length\r\n                ? proficiency.armor.map((value) => {\r\n                    return {\r\n                        key: value,\r\n                        name: value\r\n                    }\r\n                })\r\n                : [{\r\n                    key: 'feat',\r\n                    name: 'Нет'\r\n                }]\r\n            }\r\n        />\r\n    </div>\r\n}","import { Table } from \"antd\"\r\nimport React from \"react\"\r\nimport { CharacterAction, CharacterAttributes, CharacterEffects, CharacterStats } from \"../../../types/adventure/character\"\r\nimport { calculateAttributeBonus } from \"./helpers\"\r\n\r\ninterface CharacterCombatSectionProps {\r\n    action: CharacterAction;\r\n    attributes: CharacterAttributes;\r\n    stats: CharacterStats;\r\n    effects: CharacterEffects\r\n}\r\n\r\nexport const CharacterCombatSection: React.FC<CharacterCombatSectionProps> = ({ action, attributes, stats, effects }) => {\r\n    return <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n        <Table\r\n            title={() => 'Боевые навыки'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '100%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                },\r\n                {\r\n                    title: 'value',\r\n                    dataIndex: 'value',\r\n                    key: 'value',\r\n                }\r\n            ]}\r\n            dataSource={[\r\n                {\r\n                    key: 'passiveWisdom',\r\n                    name: 'Пассивная мудрость',\r\n                    value: 10 + calculateAttributeBonus(attributes.wisdom),\r\n                },\r\n                {\r\n                    key: 'armour',\r\n                    name: 'Клас доспеха',\r\n                    value: action.armorClass\r\n                },\r\n                {\r\n                    key: 'initiative',\r\n                    name: 'Бонус инициативы',\r\n                    value: stats.initiative\r\n                },\r\n                {\r\n                    key: 'speed',\r\n                    name: 'Скорость',\r\n                    value: stats.speed\r\n                },\r\n                {\r\n                    key: 'size',\r\n                    name: 'Размер',\r\n                    value: stats.size\r\n                },\r\n                {\r\n                    key: 'darkVision',\r\n                    name: 'Темное зрение',\r\n                    value: stats.darkVision\r\n                },\r\n            ]}\r\n        />\r\n        <Table\r\n            title={() => 'Хитпоинты'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '50%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                },\r\n                {\r\n                    title: 'value',\r\n                    dataIndex: 'value',\r\n                    key: 'value',\r\n                }\r\n            ]}\r\n            dataSource={[\r\n                {\r\n                    key: 'hitPoints.max',\r\n                    name: 'Максимум',\r\n                    value: action.hitPoints.max\r\n                },\r\n                {\r\n                    key: 'hitPoints.temp',\r\n                    name: 'Временные',\r\n                    value: action.hitPoints.temp\r\n                },\r\n                {\r\n                    key: 'hitPoints.current',\r\n                    name: 'Текущие',\r\n                    value: action.hitPoints.current\r\n                }\r\n            ]}\r\n        />\r\n        <Table\r\n            title={() => 'Спасброски от смерти'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '50%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                },\r\n                {\r\n                    title: 'value',\r\n                    dataIndex: 'value',\r\n                    key: 'value',\r\n                }\r\n            ]}\r\n            dataSource={[\r\n                {\r\n                    key: 'deathSaves.successes',\r\n                    name: 'Успех',\r\n                    value: action.deathSaves.successes\r\n                },\r\n                {\r\n                    key: 'deathSaves.failures',\r\n                    name: 'Провал',\r\n                    value: action.deathSaves.failures\r\n                }\r\n            ]}\r\n        />\r\n        <Table\r\n            title={() => 'Бонусы'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '50%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                },\r\n                {\r\n                    render: (args) => {\r\n                        return args.value.map((value: any) => {\r\n                            return `${value}, `\r\n                        })\r\n                    }\r\n                }\r\n            ]}\r\n            dataSource={[\r\n                {\r\n                    key: 'savingThrows',\r\n                    name: 'Спасброски',\r\n                    value: effects.savingThrows\r\n                },\r\n                {\r\n                    key: 'resistance',\r\n                    name: 'Сопротивление',\r\n                    value: effects.resistance\r\n                },\r\n                {\r\n                    key: 'immunity',\r\n                    name: 'Имунитеты',\r\n                    value: effects.immunity\r\n                },\r\n            ]}\r\n        />\r\n    </div>\r\n}","import { Button, Form, Input, Space, Table } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { getAdventure, setAdventureToDB } from \"../../../api/firebase\";\r\nimport { Adventure } from \"../../../types/adventure\";\r\nimport { CharacterEquipment } from \"../../../types/adventure/character\";\r\nimport { Item } from \"../../../types/items\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport './characterEquipment.sass'\r\nimport { DeleteOutlined, SendOutlined } from \"@ant-design/icons\";\r\n\r\nconst { TextArea } = Input;\r\n\r\ninterface CharacterEquipmentSectionProps {\r\n    equipment: CharacterEquipment[]\r\n}\r\n\r\ninterface AddItemFormFields {\r\n    name: string | string[]\r\n    description?: string | string[]\r\n    count?: number\r\n    cost?: number\r\n}\r\n\r\nexport const CharacterEquipmentSection: React.FC<CharacterEquipmentSectionProps> = ({ equipment }) => {\r\n    const [adventure, setAdventure] = useState<Adventure>();\r\n    const [isButtonOpen, setIsButtonOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getAdventure('Djadame').then((data) => setAdventure(data))\r\n    }, [])\r\n\r\n    const addItem = (values: AddItemFormFields) => {\r\n        // TODO fix bug if simultaneously try to save items\r\n        if (adventure) {\r\n            const nextAdventure = adventure;\r\n            nextAdventure.customCounter++;\r\n            const newItem: Item = {\r\n                id: `DjadameCustomItem${nextAdventure.customCounter}`,\r\n                cost: values.cost || 0,\r\n                description: {\r\n                    en: '',\r\n                    ru: values.description || '',\r\n                },\r\n                name: {\r\n                    en: '',\r\n                    ru: values.name,\r\n                },\r\n                rarity: 'common',\r\n                type: 'itemsPack',\r\n                weight: 0,\r\n                count: values.count\r\n            }\r\n            nextAdventure.itemsList.push(newItem);\r\n            setAdventure(nextAdventure);\r\n            setIsButtonOpen(false);\r\n            setAdventureToDB('Djadame', adventure);\r\n        }\r\n    }\r\n    return <>\r\n        <div className={'openButtonWrap'}><div className={`openButton ${isButtonOpen ? 'active' : ''}`} onClick={() => { setIsButtonOpen(!isButtonOpen) }}><AddIcon /></div></div>\r\n        {\r\n            isButtonOpen && <Form\r\n                className={'addItemSection'}\r\n                name={'addItem'}\r\n                onFinish={addItem}\r\n                onFinishFailed={(errors) => { console.log(errors) }}>\r\n                <Form.Item\r\n                    name={'name'}\r\n                    rules={[{ required: true, message: 'Название не должно быть пустым' }]}>\r\n                    <Input placeholder={'Название предмета'} />\r\n                </Form.Item>\r\n                <Form.Item name={'description'}>\r\n                    <TextArea placeholder={'Описание предмета'} autoSize />\r\n                </Form.Item>\r\n                <div className=\"addItemFooter\">\r\n                    <Form.Item name={'count'}>\r\n                        <Input placeholder={'Количество'}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item name={'cost'}>\r\n                        <Input placeholder={'Цена'} />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type={'primary'} htmlType=\"submit\">Add</Button>\r\n                    </Form.Item>\r\n                </div>\r\n            </Form>\r\n        }\r\n        <Table\r\n            title={() => 'Инвентарь'}\r\n            showHeader={true}\r\n            pagination={false}\r\n            style={{ width: '100%' }}\r\n            size='small'\r\n            columns={[\r\n                {\r\n                    title: 'Название',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                    sorter: (a, b) => a.name[0] > b.name[0] ? 1 : -1\r\n                    // render: (text: React.ReactNode) => <a>text</a>\r\n                },\r\n                {\r\n                    title: 'Кол-во',\r\n                    dataIndex: 'count',\r\n                    key: 'count',\r\n                    sorter: (a, b) => {\r\n                        if (a.count && b.count) {\r\n                            return a.count - b.count\r\n                        } else return 0\r\n                    }\r\n                },\r\n                {\r\n                    key: 'action',\r\n                    render: () => (\r\n                      <Space size='small'>\r\n                        <SendOutlined />\r\n                        <DeleteOutlined />\r\n                      </Space>\r\n                    ),\r\n                  },\r\n            ]}\r\n            expandedRowRender={((record: AddItemFormFields) => <>\r\n                {record.cost && record.cost !== 0\r\n                    ? <p>{`Цена ${Math.trunc(record.cost / 10000)} ЗМ ${Math.trunc(record.cost / 100 % 100)} СМ ${record.cost % 100} ММ`}</p>\r\n                    : undefined}\r\n                {record.description && <p>{record.description}</p>}\r\n            </>)}\r\n            dataSource={\r\n                adventure?.itemsList.map(item => {\r\n                    return {\r\n                        key: item.id,\r\n                        name: item.name.ru,\r\n                        count: item.count,\r\n                        cost: item.cost,\r\n                        description: item.description.ru\r\n                    }\r\n                })\r\n            }\r\n        />\r\n    </>\r\n}","import React, { useState } from 'react';\r\nimport './CharacterView.sass';\r\nimport { Character } from '../../types/adventure/character';\r\nimport { CharacterGeneralInfoSection } from './characterInfoSection/characterGeneralInfo';\r\nimport GameMenu from './GameMenu/GameMenu';\r\nimport { CharacterAttributesSection } from './characterInfoSection/characterAttributes';\r\nimport { CharacterExperienceSection } from './characterInfoSection/characterExperience';\r\nimport { CharacterProficiencySection } from './characterInfoSection/characterProficiency';\r\nimport { CharacterCombatSection } from './characterInfoSection/characterCombat';\r\nimport { ClientWindowResolution } from '../../types/General';\r\nimport { CharacterEquipmentSection } from './characterEquipmentSection/characterEquipment';\r\n\r\nexport type CharacterViewTabName = 'generalInfo' | 'attributes' | 'experience' | 'proficiency' | 'combat' | 'equipment';\r\n\r\ninterface CharacterViewProps {\r\n    windowData: ClientWindowResolution;\r\n    character: Character;\r\n}\r\n\r\nexport const CharacterView: React.FC<CharacterViewProps> = (props) => {\r\n    const [currentTab, setCurrentTab] = useState<CharacterViewTabName>('generalInfo')\r\n\r\n    const renderTab = (currentTab: CharacterViewTabName, character: Character) => {\r\n        const tab: Record<CharacterViewTabName, JSX.Element> = {\r\n            // Character about\r\n            generalInfo: <CharacterGeneralInfoSection info={character.about.info} description={character.about.description} />,\r\n            attributes: <CharacterAttributesSection attributes={character.about.attributes} skills={character.about.proficiency.skills} />,\r\n            experience: <CharacterExperienceSection classes={character.about.info.classes} action={character.about.action} info={character.about.info} />,\r\n            proficiency: <CharacterProficiencySection proficiency={character.about.proficiency} />,\r\n            combat: <CharacterCombatSection action={character.about.action} attributes={character.about.attributes} stats={character.about.stats} effects={character.about.effects} />,\r\n            // Equipment\r\n            equipment: <CharacterEquipmentSection equipment={character.equipment} />,\r\n        }\r\n        return tab[currentTab]\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                style={{\r\n                    // height: props.windowData.isMobile ? props.windowData.height - 32 - 60 : props.windowData.height,\r\n                    height: props.windowData.height - 32 - 60,\r\n                    overflow: 'auto'\r\n                }}\r\n                children={renderTab(currentTab, props.character)}\r\n            />\r\n            <GameMenu setCharacterViewTab={setCurrentTab} windowData={props.windowData} />\r\n        </>\r\n    );\r\n};\r\n","import { Button } from \"antd\";\r\nimport React, { useState } from \"react\"\r\nimport { Adventure } from \"../../types/adventure\";\r\nimport { Character } from \"../../types/adventure/character\";\r\nimport { ClientWindowResolution } from \"../../types/General\";\r\nimport { CharacterView } from \"../characterView/CharacterView\";\r\n\r\ntype contentItems = 'addButton' | 'itemPicker' | 'customItem';\r\n\r\ninterface ContentItemPickerProps {\r\n\tadventure: Adventure;\r\n\twindowData: ClientWindowResolution;\r\n\tinitialStep?: contentItems;\r\n}\r\n\r\nexport const ContentItemPicker: React.FC<ContentItemPickerProps> = (props) => {\r\n\tconst [currentstep, setCurrentStep] = useState<contentItems>(props.initialStep || 'addButton');\r\n\tconst [currentItem, setCurrentItem] = useState<JSX.Element>(<></>);\r\n\r\n\tconst onCustumItemPickerButtonClick = (element: JSX.Element) => {\r\n\t\tsetCurrentItem(element);\r\n\t\tsetCurrentStep('customItem');\r\n\t}\r\n\r\n\tconst addButton: JSX.Element = <Button onClick={() => { setCurrentStep('itemPicker') }} className={'add-content-item-button'} type={'dashed'}>+</Button>\r\n\tconst itemPicker: JSX.Element = <div className=\"content-picker\">\r\n\t\t<div className=\"character-picker\">\r\n\t\t\t{props.adventure?.charactersList.map((character: Character) => {\r\n\t\t\t\treturn <Button onClick={() => {\r\n\t\t\t\t\tonCustumItemPickerButtonClick(<CharacterView character={character} windowData={props.windowData} />)\r\n\t\t\t\t}}>{character.about.info.characterName}</Button>\r\n\t\t\t})}\r\n\t\t</div>\r\n\t</div>\t\r\n\r\n\tconst content: Record<contentItems, JSX.Element> = {\r\n\t\taddButton,\r\n\t\titemPicker,\r\n\t\tcustomItem: currentItem\r\n\t}\r\n\r\n\treturn <>{\r\n\t\tcontent[currentstep]\r\n\t}</>\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { getAdventure } from '../../api/firebase';\r\nimport { Adventure } from '../../types/adventure';\r\nimport { ClientWindowResolution } from '../../types/General';\r\nimport './AdventureView.scss';\r\nimport { ContentItemPicker } from './contentItemPicker';\r\n\r\ninterface MatchParams {\r\n\tid: string;\r\n}\r\n\r\ninterface AdventureViewProps extends RouteComponentProps<MatchParams> {\r\n\twindowData: ClientWindowResolution;\r\n}\r\n\r\nconst AdventureView: React.FC<AdventureViewProps> = (props) => {\r\n\t// const adventureUrl = props.match.url;\r\n\tconst adventureId = props.match.params.id;\r\n\tconst { height, width, isMobile } = props.windowData\r\n\tconst [adventure, setAdventure] = useState<Adventure>();\r\n\r\n\tconst countGridParams = () => {\r\n\t\tconst sideMenuWidth = 214;\r\n\t\tconst headerHeight = 32;\r\n\r\n\t\tconst widthContainersCount = isMobile\r\n\t\t\t? Math.trunc(width / 320)\r\n\t\t\t: Math.trunc((width - sideMenuWidth) / 320)\r\n\t\tconst heightContainersCount = Math.trunc(height / 450)\r\n\r\n\t\treturn {\r\n\t\t\titemHeight: isMobile\r\n\t\t\t\t? height / heightContainersCount - headerHeight\r\n\t\t\t\t: height / heightContainersCount,\r\n\t\t\titemWidth: isMobile\r\n\t\t\t\t? width / widthContainersCount\r\n\t\t\t\t: (width - sideMenuWidth) / widthContainersCount,\r\n\t\t\tmaxContainersCount: widthContainersCount * heightContainersCount\r\n\t\t}\r\n\t}\r\n\tconst gridParams = countGridParams()\r\n\r\n\tuseEffect(() => {\r\n\t\tgetAdventure(adventureId).then(response => {\r\n\t\t\tif (!adventure && response) {\r\n\t\t\t\tsetAdventure(response);\r\n\t\t\t}\r\n\t\t})\r\n\t}, [adventure, adventureId])\r\n\r\n\tconst renderContentWrap = (content: JSX.Element) => {\r\n\t\treturn <div\r\n\t\t\tclassName={'character-wrap'}\r\n\t\t\tstyle={{\r\n\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t// flexDirection: props.windowData.isMobile ? 'column' : 'row',\r\n\t\t\t\tflexDirection: 'column',\r\n\t\t\t\tjustifyContent: 'space-between',\r\n\t\t\t\theight: gridParams.itemHeight,\r\n\t\t\t\twidth: gridParams.itemWidth\r\n\t\t\t}}>\r\n\t\t\t{content}\r\n\t\t</div>\r\n\t}\r\n\r\n\tconst renderGrid = (adventure: Adventure) => {\r\n\t\tconst containersArray: JSX.Element[] = [];\r\n\t\tfor (let i = 0; i < gridParams.maxContainersCount; i++) {\r\n\t\t\tcontainersArray.push(renderContentWrap(<ContentItemPicker adventure={adventure} windowData={props.windowData} />))\r\n\t\t}\r\n\t\treturn containersArray;\r\n\t}\r\n\r\n\treturn (<>{\r\n\t\tadventure\r\n\t\t\t? <div className='adventure-view'>\r\n\t\t\t\t{\r\n\t\t\t\t\tisMobile\r\n\t\t\t\t\t\t? <>{renderContentWrap(<ContentItemPicker adventure={adventure} windowData={props.windowData} initialStep={'itemPicker'} />)}</>\r\n\t\t\t\t\t\t: <>{renderGrid(adventure)}</>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t\t: <div>Loading . . .</div>\r\n\t}</>);\r\n};\r\n\r\nconst mapStateToProps = (state: AdventureViewProps) => {\r\n\treturn ({\r\n\t\twindowData: state.windowData,\r\n\t})\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(AdventureView);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './CharacterCreate.sass';\r\n\r\ninterface CharacterCreateProps {\r\n\r\n}\r\n\r\nconst CharacterCreate = (props: CharacterCreateProps) => {\r\n  const [state, setState] = useState(true);\r\n\r\n  useEffect(() => {\r\n    console.log('[CharacterCreate WORKS!!!]', null);\r\n  }, [state]);\r\n\r\n  return (\r\n    <div className='character-create'>\r\n      <button onClick={ () => setState(!state) }>CharacterCreate WORKS!!!</button>\r\n      <input type=\"text\"/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, null)(CharacterCreate);\r\n","import { Button, Form, Input, Modal } from 'antd';\r\nimport React from 'react';\r\nimport { SignInEmail, SignInGoogleAccount, SignUpEmail } from '../api/firebase';\r\nimport './signInModal.sass'\r\nimport { Tooltip } from '@material-ui/core';\r\n\r\ninterface SignInModalProps {\r\n    isOpened: boolean;\r\n    onOk: () => void;\r\n    onClose: () => void;\r\n}\r\n\r\ninterface SignInModalFormValues {\r\n    email: string;\r\n    password: string;\r\n    isSignIn: boolean;\r\n}\r\n\r\nexport const SignInModal: React.FC<SignInModalProps> = (props) => {\r\n    return <>\r\n        <Modal\r\n            title={'Вход'}\r\n            visible={props.isOpened}\r\n            onOk={props.onOk}\r\n            onCancel={props.onClose}\r\n            footer={<>\r\n                <div onClick={() => {\r\n\r\n                }}>\r\n                </div>\r\n            </>}>\r\n            <Form\r\n                className={'SignInForm'}\r\n                name={'signIn'}\r\n                onFinish={(values: SignInModalFormValues) => {\r\n                    SignUpEmail(values.email, values.password).then((result) => {\r\n                        if (result.code === 'auth/email-already-in-use') SignInEmail(values.email, values.password);\r\n                    }).then(() => props.onOk())\r\n                }}\r\n                onFinishFailed={(errors) => { console.log(errors) }}>\r\n                <Form.Item\r\n                    name={'email'}\r\n                    rules={[{ required: true, message: 'Поле не должно быть пустым' }, { type: 'email', message: 'Неверный формат почты' }]}>\r\n                    <Input placeholder={'Email'} />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"password\"\r\n                    rules={[{ required: true, message: 'Поле не должно быть пустым' }, { min: 6, message: 'Пароль должен состоять минимум из 6 символов' }]}>\r\n                    <Input.Password placeholder={'Пароль'} />\r\n                </Form.Item>\r\n                <div className=\"sign-in-buttons\">\r\n                    <Tooltip title=\"Войти с помощью Google\">\r\n                        <img\r\n                            className='signInIcon'\r\n                            src={process.env.PUBLIC_URL + '/img/autorization/google.svg.webp'}\r\n                            alt=\"Войти с помощью Google\"\r\n                            onClick={() => SignInGoogleAccount().then(() => props.onOk())}\r\n                        />\r\n                    </Tooltip>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">Войти</Button>\r\n                    </Form.Item>\r\n                </div>\r\n            </Form>\r\n        </Modal>\r\n    </>\r\n}","import AddIcon from '@material-ui/icons/Add';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport React, { useState } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport * as ROUTES from '../routes';\r\nimport './sideMenu.sass'\r\nimport { ClientWindowResolution, PlayerAccount } from '../types/General';\r\nimport { Avatar, Drawer, Switch } from 'antd';\r\nimport { BookOutlined, UserOutlined } from '@ant-design/icons';\r\nimport { auth } from 'firebase';\r\n\r\ninterface SideMenuProps {\r\n  windowData: ClientWindowResolution;\r\n  userData: PlayerAccount;\r\n  isMenuOpened: boolean;\r\n  onSignInButtonClick: () => void;\r\n  onClose: () => void;\r\n}\r\n\r\ninterface RenderMenuListProps {\r\n  icon: JSX.Element;\r\n  text: string;\r\n  route?: string;\r\n  onClick?: () => void\r\n}\r\n\r\nexport const SideMenu: React.FC<SideMenuProps> = (props) => {\r\n  const [isMenuCollapsed, setIsMenuCollapsed] = useState(false);\r\n  const [currentUserEmail, setcurrentUserEmail] = useState<string | null | undefined>()\r\n  const location = useLocation();\r\n\r\n  auth().onAuthStateChanged(() => {\r\n    setcurrentUserEmail(auth().currentUser?.email);\r\n  });\r\n\r\n  const renderMenuItem = (props: RenderMenuListProps) => {\r\n    return <div className='menu-list__item'>\r\n      <Link to={props.route || location.pathname} className='menu-list__link' onClick={props.onClick}>\r\n        <div className='menu-list__static-item'>{props.icon}</div>\r\n        <div className={!isMenuCollapsed ? 'menu-list__text' : 'menu-list__text collapsed'}>\r\n          <span>{props.text}</span>\r\n        </div>\r\n      </Link>\r\n    </div>;\r\n  };\r\n\r\n  const renderMenuList = () => {\r\n    return <div className='menu-list'>\r\n      <div>\r\n        {renderMenuItem({ icon: <HomeIcon />, text: 'Главная', route: ROUTES.ROOT })}\r\n        {renderMenuItem({ icon: <ListIcon />, text: 'Приключения', route: ROUTES.ADVENTURE })}\r\n\r\n        {renderMenuItem({ icon: <AddIcon />, text: 'Создать приключение', route: ROUTES.ADVENTURE_CREATE })}\r\n        {renderMenuItem({ icon: <PersonAddIcon />, text: 'Создать персонажа', route: '/game/adventure/view/Djadame/character/create' })}\r\n        {renderMenuItem({ icon: <BookOutlined />, text: 'Jadame', route: '/adventure/G9MSzXmwTIe16ttfHEv3' })}\r\n      </div>\r\n      <div>\r\n        {renderMenuItem({\r\n          icon: <Avatar icon={<UserOutlined />} />,\r\n          text: currentUserEmail?.split('@')[0] || 'Вход',\r\n          onClick: currentUserEmail ? () => auth().signOut() : props.onSignInButtonClick\r\n        })}\r\n        {\r\n          !props.windowData.isMobile &&\r\n          <div className='menu-list__item switch'>\r\n            <Switch\r\n              checked={!isMenuCollapsed}\r\n              onChange={() => setIsMenuCollapsed(!isMenuCollapsed)} />\r\n            <span className={!isMenuCollapsed ? 'menu-list__text' : 'menu-list__text collapsed'}>COLLAPSE MENU</span>\r\n          </div>\r\n        }\r\n      </div>\r\n    </div>;\r\n  };\r\n\r\n  return props.windowData.isMobile\r\n    ? <Drawer\r\n      visible={props.isMenuOpened}\r\n      onClose={props.onClose}>\r\n      <div\r\n        className='side-menu side-menu--mobile'\r\n        onClick={props.onClose}\r\n        onKeyDown={props.onClose}>\r\n        {renderMenuList()}\r\n      </div>\r\n    </Drawer>\r\n    : <div\r\n      className={`side-menu side-menu--desktop ${isMenuCollapsed ? 'collapsed' : ''} ${!props.isMenuOpened ? 'closed' : ''}`}>\r\n      {renderMenuList()}\r\n    </div>;\r\n};","import 'antd/dist/antd.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport * as ROUTES from './routes';\r\nimport Home from './pages/home/Home';\r\nimport AdventureCreate from './pages/adventureCreate/AdventureCreate';\r\nimport AdventureList from './pages/adventureList/AdventureList';\r\nimport AdventureView from './pages/adventureView/AdventureView';\r\nimport CharacterCreate from './pages/characterCreate/CharacterCreate';\r\nimport './App.sass'\r\nimport { connect } from 'react-redux';\r\nimport { setWindowAction } from './redux/actions/windowActions';\r\nimport { ClientWindowResolution, PlayerAccount } from './types/General';\r\nimport { SignInModal } from './common/signInModal';\r\nimport { SideMenu } from './common/sideMenu';\r\nimport { setUserAction } from './redux/actions/userActions';\r\nimport { Button } from 'antd';\r\n\r\ninterface AppProps {\r\n    windowData: ClientWindowResolution;\r\n    userData: PlayerAccount;\r\n    setWindow: () => void;\r\n    setUser: (player: PlayerAccount) => void;\r\n}\r\n\r\nconst App: React.FC<AppProps> = (props) => {\r\n    const headerHeight = 32;\r\n    const vh = window.innerHeight * 0.01;\r\n    const [isMenuOpened, setIsMenuOpened] = useState(false);\r\n    const [isSignInModalOpened, setIsSignInModalOpened] = useState(false);\r\n\r\n    const style = {\r\n        header: props.windowData?.isMobile\r\n            ? { height: headerHeight }\r\n            : { display: 'none' },\r\n        content: {\r\n            height: props.windowData?.isMobile ? props.windowData.height - headerHeight : props.windowData.height,\r\n            overflow: 'auto',\r\n        }\r\n    }\r\n\r\n    const onResize = () => {\r\n        props.setWindow();\r\n        document.documentElement.style.setProperty('--vh', `${vh}px`);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.onresize = onResize;\r\n        onResize()\r\n        return () => { window.onresize = null; };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className={'app'}>\r\n                <SideMenu\r\n                    windowData={props.windowData}\r\n                    userData={props.userData}\r\n                    isMenuOpened={isMenuOpened}\r\n                    onSignInButtonClick={() => setIsSignInModalOpened(true)}\r\n                    onClose={() => setIsMenuOpened(false)} />\r\n\r\n                <div className='header' style={style.header}>\r\n                    <Button className={'menu-button'} onClick={() => setIsMenuOpened(true)}>menu</Button>\r\n                </div>\r\n\r\n                <div className={'content'} style={style.content}>\r\n                    <Route exact path={ROUTES.ROOT} component={Home} />\r\n                    <Route exact path={ROUTES.ADVENTURE} component={AdventureList} />\r\n\r\n                    <Route exact path={ROUTES.ADVENTURE_CREATE} component={AdventureCreate} />\r\n                    <Route exact path={ROUTES.ADVENTURE_VIEW} component={AdventureView} />\r\n                    <Route path={ROUTES.CHARACTER_CREATE} component={CharacterCreate} />\r\n                </div>\r\n            </div>\r\n            <SignInModal\r\n                isOpened={isSignInModalOpened}\r\n                onOk={() => {\r\n                    setIsSignInModalOpened(false);\r\n                }}\r\n                onClose={() => setIsSignInModalOpened(false)} />\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppProps) => {\r\n    return ({\r\n        windowData: state.windowData,\r\n        userData: state.userData\r\n    })\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    setWindow: setWindowAction,\r\n    setUser: setUserAction\r\n})(App);","import { Dispatch } from \"redux\";\r\nimport { setWindowActionConverter } from \".\";\r\nimport { ClientWindowResolution } from \"../../types/General\";\r\n\r\nexport const setWindowAction: () => (dispatch: Dispatch) => (Promise<void>) = () => async (dispatch) => {\r\n    document.documentElement.style.setProperty('--vh', `${document.documentElement.clientHeight * 0.01}px`);\r\n    const body = document.getElementsByTagName('body')[0];\r\n    \r\n    const windowData: ClientWindowResolution = {\r\n        width: body.clientWidth,\r\n        height: body.clientHeight,\r\n        isMobile: body.clientWidth < 1024,\r\n        isLandscape: body.clientWidth > body.clientHeight\r\n    }\r\n\r\n    dispatch(setWindowActionConverter(windowData));\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport './index.sass';\r\nimport { store } from './store';\r\nimport App from './app/App';\r\n\r\nconst RoutedApp = () => (\r\n  <Provider store={ store }>\r\n    <Router basename='/dmt2'>\r\n      <App />\r\n    </Router>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(<RoutedApp />, document.getElementById('root'));\r\n"],"sourceRoot":""}