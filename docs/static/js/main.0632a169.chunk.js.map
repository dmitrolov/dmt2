{"version":3,"sources":["app/components/SideMenu/SideMenu.tsx","app/constants/routes.ts","app/api/firebase/firebase.ts","app/pages/adventureCreate/AdventureCreate.tsx","app/pages/adventureList/AdventureList.tsx","app/pages/adventureView/AdventureView.tsx","app/pages/characterView/CharacterView.tsx","app/redux/constants.ts","app/redux/actions/index.ts","app/redux/actions/userActions.ts","app/pages/home/Home.tsx","app/pages/signIn/SignIn.tsx","app/pages/signUp/SignUp.tsx","app/App.tsx","serviceWorker.ts","app/redux/reducers/userDataReducer.ts","app/redux/reducers/index.ts","store.ts","index.tsx"],"names":["SubMenu","Menu","menuItems","name","link","icon","subItems","SideMenu","props","className","mode","inlineCollapsed","isMobileMenuView","isMenuCollapsed","style","marginLeft","renderMenu","options","map","option","key","title","type","Item","to","renderMenuItem","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","newAdventure","description","image","playersList","dungeonMaster","charactersList","notes","connect","useState","playerEmail","setPlayerEmail","errorsList","setErrorsList","currentErrors","onChange","event","target","value","placeholder","e","onClick","push","email","length","console","log","firestore","collection","doc","set","then","response","error","adventuresList","setAdventuresList","get","adventures","docs","data","useEffect","adventure","id","match","params","state","setState","actions","SET_USER","userActionTypes","setUserActionConverter","user","payload","createAction","setUserAction","dispatch","a","async","userData","setUser","userEmail","setUserEmail","bodyWidth","document","getElementsByTagName","clientWidth","bodyHeight","clientHeight","auth","onAuthStateChanged","currentUser","alert","signOut","setEmail","password","setPassword","statusList","setStatus","pass","signInWithEmailAndPassword","catch","SignInEmail","firebaseResponse","message","validationErrors","test","String","toLowerCase","validation","createUserWithEmailAndPassword","SignUpEmail","App","setIsMenuCollapsed","isMenu2Open","setMenu2","stage","getElementById","mc","Hammer","on","appContainerStyles","width","minWidth","maxWidth","height","minHeight","maxHeight","border","basename","exact","path","component","Home","SignIn","SignUp","AdventureCreate","AdventureList","AdventureView","CharacterView","Boolean","window","location","hostname","initialState","rootReducer","combineReducers","action","middleware","thunk","env","REACT_APP_NODE_ENV","logger","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+dAOQA,G,OAAYC,IAAZD,SAcFE,EAAwB,CAC5B,CAAEC,KAAM,OAAQC,KCtBE,IDsBiBC,KAAM,QACzC,CACEA,KAAM,OAAQF,KAAM,6CAAWG,SAAU,CACvC,CAAEH,KAAM,2BAAQC,KCvBC,WDwBjB,CAAED,KAAM,qEAAeC,KCzBN,aD4BrB,CACEC,KAAM,QAASF,KAAM,qEAAeG,SAAU,CAC5C,CAAEH,KAAM,gHAAuBC,KC5BL,qBD6B1B,CAAED,KAAM,wFAAmBC,KC5BH,qBDgC5B,CACED,KAAM,oGAAqBE,KAAM,OAAQC,SAAU,CACjD,CACEH,KAAM,uCAAUE,KAAM,QAASC,SAAU,CACvC,CACEH,KAAM,gEAAeE,KAAM,QAASC,SAAU,CAC5C,CAAEH,KAAM,8FAOpB,CAAEE,KAAM,cAAeF,KAAM,iEAGlBI,EAAW,SAACC,GACvB,OACE,kBAAC,IAAD,CAAMC,UAAU,YACVC,KAAK,SACLC,iBAAkBH,EAAMI,kBAA2BJ,EAAMK,gBACzDC,MAAQN,EAAMI,kBAAoBJ,EAAMK,gBAAkB,CAAEE,YAAa,KAAQ,CAAEA,WAAY,IACjGC,EAAWd,KAgBbc,EAAa,SAAbA,EAAcC,GAClB,OAAOA,EAAQC,KAAI,SAACC,GAClB,OAAOA,EAAOb,SAEZ,kBAACN,EAAD,CAASoB,IAAMD,EAAOhB,KAAOkB,MAC3B,8BACE,kBAAC,IAAD,CAAMC,KAAOH,EAAOd,OACpB,8BAAQc,EAAOhB,QAGfa,EAAWG,EAAOb,WArBL,SAACa,GACtB,OACE,kBAAC,IAAKI,KAAN,CAAWH,IAAMD,EAAOhB,MACtB,kBAAC,IAAD,CAAMqB,GAAKL,EAAOf,MClEJ,KDmEVe,EAAOd,MAAQ,kBAAC,IAAD,CAAMiB,KAAOH,EAAOd,OACrC,8BAAQc,EAAOhB,QAmBjBsB,CAAeN,O,uCEzErBO,IAASC,cATM,CACbC,OAAQC,0CACRC,WAAYD,mCACZE,YAAaF,0CACbG,UAAWH,mBACXI,cAAeJ,+BACfK,kBAAmBL,iBAKd,IA+CQH,IAAf,ECzDMS,G,OAA0B,CAC9BhC,KAAM,GACNiC,YAAa,GACbC,MAAO,GACPC,YAAa,GACbC,cAAe,GACfC,eAAgB,GAChBC,MAAO,KAmDMC,cAAQ,KAAM,KAAdA,EAhDS,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACrBC,EADqB,KACRC,EADQ,OAEQF,mBAAS,CAAC,KAFlB,mBAErBG,EAFqB,KAETC,EAFS,KAGtBC,EAA0B,GAiBhC,OACE,yBAAKvC,UAAU,oBACb,sJACA,2BAAOwC,SAAY,SAAAC,GAAK,OAAIf,EAAahC,KAAO+C,EAAMC,OAAOC,SAC7D,qJACA,8BAAUH,SAAY,SAAAC,GAAK,OAAIf,EAAaC,YAAcc,EAAMC,OAAOC,SACvE,qJACA,2BAAOC,YAAY,MAAMJ,SAAY,SAAAC,GAAK,OAAIf,EAAaE,MAAQa,EAAMC,OAAOC,SAChF,uHACA,6BACE,2BAAOC,YAAY,QAAQD,MAAQR,EAAcK,SAAW,SAACK,GAAOT,EAAeS,EAAEH,OAAOC,UAC5F,4BAAQG,QAAU,WAChBpB,EAAaG,YAAYkB,KAAKZ,GAC9BC,EAAe,MAFjB,qDAMF,sEACEV,EAAaG,YAAYpB,KAAI,SAAAuC,GAAK,OAAI,8BAAQA,MAChD,gDACEtB,EAAaG,YAAY,GAC3B,4BAAQiB,QA7BK,WDIY,IAACpB,ECVK,IAA7BA,EAAahC,KAAKuD,QAAcV,EAAcQ,KAAK,sCACf,IAApCrB,EAAaG,YAAYoB,QAAcV,EAAcQ,KAAK,oCAC9DT,EAAcC,GACdW,QAAQC,IAAI,mBAAoBZ,GAKH,IAAzBA,EAAcU,SAChBvB,EAAaI,cAAgBJ,EAAaG,YAAY,IDC5BH,ECAVA,EDCbT,IAASmC,YACbC,WAAW,cACXC,IAAI5B,EAAahC,MACjB6D,IAHI,eAGI7B,KCJuB8B,MAAK,SAAAC,GAAQ,OAAIP,QAAQC,IAAI,8BAA+BM,SAyB1F,iHACA,yCACEpB,EAAW5B,KAAI,SAAAiD,GAAK,OAAI,8BAAQA,UCjCzBzB,G,OAAAA,YAAQ,KAAM,KAAdA,EAnBc,WAAO,IAAD,EACWC,mBAAsB,IADjC,mBAC1ByB,EAD0B,KACVC,EADU,KAWjC,OFsBO3C,IAASmC,YACbC,WAAW,cACXQ,MACAL,MAAK,SAAAM,GACJ,OAAOA,EAAWC,KAAKtD,KAAI,SAAA6C,GACzB,OAAOA,EAAIU,aEnCMR,MAAK,SAACM,GAC3BF,EAAkBE,MAGpBG,qBAAU,eAKR,yBAAKjE,UAAU,kBAAf,qBAEI2D,EAAelD,KAAI,SAAAyD,GAAS,OAAI,kBAAC,IAAD,CAAMnD,GAAE,eAAUmD,EAAUxE,OAAUwE,EAAUxE,cCJzEuC,G,OAAAA,YAAQ,KAAM,KAAdA,EAZO,SAAClC,GAAgB,IAE7BoE,EADUpE,EAAVqE,MACaC,OAAbF,GAER,OACE,yBAAKnE,UAAU,kBACb,8CAAoBmE,GACpB,kBAAC,IAAD,CAAMpD,GAAE,UAAKoD,EAAL,sBAAR,6CCaSlC,G,OAAAA,YAAQ,KAAM,KAAdA,EAjBO,SAAClC,GAA+B,IAAD,EACzBmC,oBAAS,GADgB,mBAC5CoC,EAD4C,KACrCC,EADqC,KAG3CJ,EADUpE,EAAVqE,MACaC,OAAbF,GAMR,OAJAF,qBAAU,WACRf,QAAQC,IAAI,2BAA4B,QACvC,CAACmB,IAGF,yBAAKtE,UAAU,kBACb,4BAAQ8C,QAAU,kBAAMyB,GAAUD,KAAlC,0BACA,kDAAuB,2BAAIH,S,2BCpBpBK,EACM,CACfC,SAAU,YCCNC,EAAoBF,EASfG,EAAyB,SAACC,GAAD,OAPjB,SAAC/D,GAAuC,IAAzBgE,EAAwB,uDAAT,KACjD,MAAO,CACLhE,OACAgE,WAIkDC,CAAaJ,EAAgBD,SAAUG,ICRhFG,EAAgB,SAACH,GAAD,OAAgB,SAAOI,GAAP,eAAAC,EAAAC,OAAA,gDACrCC,EAAiB,CACrBnC,MAAO4B,EAAK5B,OAEdgC,EAASL,EAAuBQ,IAJW,uCCiC9BlD,eAAQ,SAACqC,GAAD,MAAsB,CAC3Ca,SAAUb,EAAMa,YACd,CACFC,QAASL,GAHI9C,EAxBK,SAAClC,GAAiB,IAAD,EACDmC,mBAAS,IADR,mBAC5BmD,EAD4B,KACjBC,EADiB,KAE7BC,EAAYC,SAASC,qBAAqB,QAAQ,GAAGC,YACrDC,EAAaH,SAASC,qBAAqB,QAAQ,GAAGG,aAU5D,OARA3B,qBAAU,WACRlE,EAAMqF,QAAQ,CAACpC,MAAOqC,MACrB,CAACA,IAEJpE,EAAS4E,OAAOC,oBAAmB,WAAO,IAAD,EACvCR,GAAa,UAAArE,EAAS4E,OAAOE,mBAAhB,eAA6B/C,QAAS,OAInD,yBAAKhD,UAAU,QACb,+CAAsBqF,EAAtB,KACA,4BAAQvC,QAAS,kBAAMkD,MAAMjG,EAAMoF,SAASnC,SAA5C,oCACA,4BAAQF,QAAS,kBAAM7B,EAAS4E,OAAOI,YAAvC,YACA,4BAAQnD,QAAS,kBAAMkD,MAAMT,KAA7B,qBACA,4BAAQzC,QAAS,kBAAMkD,MAAML,KAA7B,0BCiBS1D,G,OAAAA,YAAQ,KAAM,CAC3BmD,QAASL,GADI9C,EAtCA,SAAClC,GAAoB,IAAD,EACPmC,mBAAS,IADF,mBAC1Bc,EAD0B,KACnBkD,EADmB,OAEDhE,mBAAS,IAFR,mBAE1BiE,EAF0B,KAEhBC,EAFgB,OAGDlE,mBAAmB,IAHlB,mBAG1BmE,EAH0B,KAGdC,EAHc,KA0BjC,OACE,yBAAKtG,UAAU,WACb,wCACA,2BAAO2C,MAAQK,EAAQR,SAbL,SAACC,GACrB,IAAMO,EAAQP,EAAMC,OAAOC,MAC3BuD,EAASlD,MAYP,0CACA,2BAAOnC,KAAK,WAAW8B,MAAQwD,EAAW3D,SAVrB,SAACC,GACxB,IAAM8D,EAAO9D,EAAMC,OAAOC,MAC1ByD,EAAYG,MASRF,EAAW5F,KAAI,SAAAiD,GAAK,OAAI,8BAAQA,MAClC,4BAAQZ,QA5BK,WACW,IAAtBuD,EAAWpD,QTOQ,SAACD,EAAemD,GACzC,OAAOlF,IAAS4E,OACfW,2BAA2BxD,EAAOmD,GAClCM,OAAM,SAAC5D,GACN,OAAOA,KSXsB6D,CAAY1D,EAAOmD,GAAU3C,MAAK,SAAAmD,GAE7D,GADIA,EAAiBC,SAASN,EAAU,CAACK,EAAiBC,UACtDD,EAAiB/B,KAAM,CACzB,IAAMmB,EAAoB,CAAE/C,MAAO2D,EAAiB/B,KAAK5B,OACzDsD,EAAU,CAAC,gCACXvG,EAAMqF,QAAQW,SAsBhB,gBCoBS9D,G,OAAAA,YAAQ,KAAM,CAC3BmD,QAASL,GADI9C,EArDA,SAAClC,GAAoB,IAAD,EACPmC,mBAAS,IADF,mBAC1Bc,EAD0B,KACnBkD,EADmB,OAEDhE,mBAAS,IAFR,mBAE1BiE,EAF0B,KAEhBC,EAFgB,OAGDlE,mBAAmB,IAHlB,mBAG1BmE,EAH0B,KAGdC,EAHc,KAyCjC,OAJArC,qBAAU,YAhCS,WAEjB,IACM4C,EAA6B,GADxB,eAGHC,KAAKC,OAAO/D,GAAOgE,gBAAgBH,EAAiB9D,KAAK,yCAC7DoD,EAASlD,OAAS,GAAG4D,EAAiB9D,KAAK,6CAC/CuD,EAAUO,GACV3D,QAAQC,IAAI,sBAAuB0D,GAyBnCI,KACC,CAACjE,EAAOmD,IAGT,yBAAKnG,UAAU,WACb,wCACA,2BAAO2C,MAAQK,EAAQR,SAjBL,SAACC,GACrB,IAAMO,EAAQP,EAAMC,OAAOC,MAC3BuD,EAASlD,MAgBP,0CACA,2BAAOnC,KAAK,WAAW8B,MAAQwD,EAAW3D,SAdrB,SAACC,GACxB,IAAM8D,EAAO9D,EAAMC,OAAOC,MAC1ByD,EAAYG,MAaRF,EAAW5F,KAAI,SAAAiD,GAAK,OAAI,8BAAQA,MAClC,4BAAQZ,QAhCK,WACW,IAAtBuD,EAAWpD,QVZQ,SAACD,EAAemD,GACzC,OAAOlF,IAAS4E,OACfqB,+BAA+BlE,EAAOmD,GACtCM,OAAM,SAAC5D,GACN,OAAOA,KUQsBsE,CAAYnE,EAAOmD,GAAU3C,MAAK,SAACmD,GAE9D,GADIA,EAAiBC,SAASN,EAAU,CAACK,EAAiBC,UACtDD,EAAiB/B,KAAM,CACzB,IAAMmB,EAAoB,CAAE/C,MAAO2D,EAAiB/B,KAAK5B,OACzDsD,EAAU,CAAC,4CACXvG,EAAMqF,QAAQW,SA0BhB,gBC3COqB,EAAgB,SAACrH,GAC5B,IAAMwF,EAAYC,SAASC,qBAAqB,QAAQ,GAAGC,YACrDC,EAAaH,SAASC,qBAAqB,QAAQ,GAAGG,aACtDzF,EAAmBoF,GAAa,IAHK,EAKGrD,oBAAS,GALZ,mBAKnBmF,GALmB,aAMXnF,oBAAS,GANE,mBAMpCoF,EANoC,KAMvBC,EANuB,KAY3CtD,qBAAU,WACR,GAAI9D,EAAkB,CACpB,IAAMqH,EAAQhC,SAASiC,eAAe,QAChCC,EAAK,IAAIC,IAAOH,GACtBE,EAAGE,GAAG,aAAa,WACjB1E,QAAQC,IAAI,gBACZkE,GAAmB,MAErBK,EAAGE,GAAG,cAAc,WAClB1E,QAAQC,IAAI,iBACZkE,GAAmB,SAGtB,IAEH,IAAMQ,EAAoC,CACxCC,MAAOvC,EACPwC,SAAUxC,EACVyC,SAAUzC,EACV0C,OAAQtC,EACRuC,UAAUvC,EACVwC,UAAWxC,EACXyC,OAAQ,iBAGV,OACE,kBAAC,IAAD,CAAQC,SAAS,SACf,yBAAKrI,UAAU,MAAMK,MAAOwH,GAI1B,yBAAK7H,UAAU,gBACb,kBAAC,IAAD,CAAOsI,OAAK,EAACC,KZ5DH,IY4DwBC,UAAYC,IAC9C,kBAAC,IAAD,CAAOF,KZ3DM,UY2DkBC,UAAYE,IAC3C,kBAAC,IAAD,CAAOH,KZ7DM,UY6DkBC,UAAYG,IAC3C,kBAAC,IAAD,CAAOJ,KZ5De,oBY4DkBC,UAAYI,IACpD,kBAAC,IAAD,CAAOL,KZ5Da,kBY4DkBC,UAAYK,IAClD,kBAAC,IAAD,CAAOP,OAAK,EAACC,KZ5DO,sBY4DwBC,UAAYM,IACxD,kBAAC,IAAD,CAAOP,KZ5Da,oCY4DkBC,UAAYO,KAEpD,4BAAQ/I,UAAU,mBAAmB8C,QAAS,kBAAMyE,GAAUD,KAA9D,KACCA,GAAe,yBAAKtH,UAAU,cAC7B,kBAAC,EAAD,CAAUG,iBAAkBA,EAAkBC,iBAAkBkH,Q,OC1DtD0B,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/E,MACvB,2D,gDCdEgF,EAAqB,CACzBpG,MAAO,ICFIqG,EAAcC,0BAAgB,CACzCnE,SDI6B,WAA8D,IAA7Db,EAA4D,uDAA9C8E,EAAcG,EAAgC,uCAClF9E,EAAaD,EAAbC,SAER,OAAI8E,EAAO1I,OAAS4D,EACX,eAAK8E,EAAO1E,SACPP,KELVkF,EAAa,CAACC,KACdC,EAAMtI,sXAAYuI,mBAEpBD,GAAe,gBAARA,GAETF,EAAWzG,KAAK6G,KAKX,IAAMC,EAAQC,sBACnBT,EAbmB,GAenBU,8BACEC,kBAAe,WAAf,EAAmBR,KCRvBS,IAASC,OAAO,mBANE,kBAChB,kBAAC,IAAD,CAAUL,MAAQA,GAChB,kBAAC,EAAD,SAIY,MAAerE,SAASiC,eAAe,SJ6HjD,kBAAmB0C,WACrBA,UAAUC,cAAcC,MAAM7G,MAAK,SAAA8G,GACjCA,EAAaC,kB","file":"static/js/main.0632a169.chunk.js","sourcesContent":["import { Icon, Menu } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as ROUTES from '../../constants/routes';\r\nimport './SideMenu.sass';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\ninterface SideMenu {\r\n  isMobileMenuView: boolean\r\n  isMenuCollapsed: boolean\r\n}\r\n\r\ninterface MenuItem {\r\n  name: string;\r\n  icon?: string;\r\n  link?: string;\r\n  subItems?: MenuItem[];\r\n}\r\n\r\nconst menuItems: MenuItem[] = [\r\n  { name: 'Home', link: ROUTES.HOME, icon: 'home' },\r\n  {\r\n    icon: 'user', name: 'Аккаунт', subItems: [\r\n      { name: 'Вход', link: ROUTES.SIGN_IN },\r\n      { name: 'Регистрация', link: ROUTES.SIGN_UP }\r\n    ]\r\n  },\r\n  {\r\n    icon: 'crown', name: 'Приключения', subItems: [\r\n      { name: 'Создать приключение', link: ROUTES.ADVENTURE_CREATE },\r\n      { name: 'Мои приключения', link: ROUTES.ADVENTURE_LIST },\r\n    ]\r\n  },\r\n\r\n  {\r\n    name: 'Список персонажей', icon: 'team', subItems: [\r\n      {\r\n        name: 'Гремми', icon: 'crown', subItems: [\r\n          {\r\n            name: 'О персонаже', icon: 'crown', subItems: [\r\n              { name: 'Характеристики' }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  { icon: 'thunderbolt', name: 'Заклинания' }\r\n];\r\n\r\nexport const SideMenu = (props: SideMenu) => {\r\n  return (\r\n    <Menu className='side-menu'\r\n          mode=\"inline\"\r\n          inlineCollapsed={ props.isMobileMenuView ? false : props.isMenuCollapsed }\r\n          style={ props.isMobileMenuView && props.isMenuCollapsed ? { marginLeft: -240 } : { marginLeft: 0 } }>\r\n      { renderMenu(menuItems) }\r\n    </Menu>\r\n  );\r\n};\r\n\r\nconst renderMenuItem = (option: MenuItem) => {\r\n  return (\r\n    <Menu.Item key={ option.name }>\r\n      <Link to={ option.link || ROUTES.HOME }>\r\n        { option.icon && <Icon type={ option.icon } /> }\r\n        <span>{ option.name }</span>\r\n      </Link>\r\n    </Menu.Item>\r\n  );\r\n};\r\n\r\nconst renderMenu = (options: MenuItem[]) => {\r\n  return options.map((option: MenuItem) => {\r\n    return option.subItems\r\n      ?\r\n      <SubMenu key={ option.name } title={\r\n        <span>\r\n          <Icon type={ option.icon } />\r\n          <span>{ option.name }</span>\r\n        </span>\r\n      }>\r\n        { renderMenu(option.subItems) }\r\n      </SubMenu>\r\n      :\r\n      renderMenuItem(option);\r\n  });\r\n};\r\n","export const HOME = '/';\r\nexport const SIGN_UP = '/signup';\r\nexport const SIGN_IN = '/signin';\r\nexport const ADVENTURE_CREATE = '/adventure/create';\r\nexport const ADVENTURE_LIST = '/adventure/list';\r\nexport const ADVENTURE_VIEW = '/adventure/view/:id';\r\nexport const CHARACTER_VIEW = '/adventure/view/:id/character/:id';\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport { Adventure } from '../../types/adventure/Adventure';\r\n\r\nconst config = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const SignUpEmail = (email: string, password: string) => {\r\n  return firebase.auth()\r\n  .createUserWithEmailAndPassword(email, password)\r\n  .catch((e: any) => {\r\n    return e;\r\n  });\r\n};\r\n\r\nexport const SignInEmail = (email: string, password: string) => {\r\n  return firebase.auth()\r\n  .signInWithEmailAndPassword(email, password)\r\n  .catch((e: any) => {\r\n    return e;\r\n  });\r\n};\r\n\r\nexport const CreateAdventure = (newAdventure: Adventure) => {\r\n  return firebase.firestore()\r\n    .collection('adventures')\r\n    .doc(newAdventure.name)\r\n    .set({...newAdventure})\r\n};\r\n\r\nexport const GetAllUserAdventures: () => Promise<Adventure[]> = () => {\r\n  return firebase.firestore()\r\n    .collection('adventures')\r\n    .get()\r\n    .then(adventures => {\r\n      return adventures.docs.map(doc => {\r\n        return doc.data() as Adventure;\r\n      })\r\n    })\r\n};\r\n\r\n\r\n\r\nexport const getAllChars = () => {\r\n  return firebase.firestore()\r\n  .collection('playerCharacters')\r\n  .get()\r\n  .then((characters) => {\r\n    return characters.docs.map((doc) => {\r\n      return { id: doc.id, ...doc.data() };\r\n    });\r\n  });\r\n};\r\n\r\nexport default firebase;\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CreateAdventure } from '../../api/firebase/firebase';\r\nimport { Adventure } from '../../types/adventure/Adventure';\r\nimport './AdventureCreate.sass';\r\n\r\nconst newAdventure: Adventure = {\r\n  name: '',\r\n  description: '',\r\n  image: '',\r\n  playersList: [],\r\n  dungeonMaster: '',\r\n  charactersList: [],\r\n  notes: []\r\n};\r\n\r\nconst AdventureCreate = () => {\r\n  const [playerEmail, setPlayerEmail] = useState('');\r\n  const [errorsList, setErrorsList] = useState(['']);\r\n  const currentErrors: string[] = [];\r\n\r\n  const validation = () => {\r\n    if (newAdventure.name.length === 0) currentErrors.push('Adventure name should not be empty');\r\n    if (newAdventure.playersList.length === 0) currentErrors.push('Players list should not be empty');\r\n    setErrorsList(currentErrors);\r\n    console.log('[currentErrors]:', currentErrors);\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    validation();\r\n    if (currentErrors.length === 0) {\r\n      newAdventure.dungeonMaster = newAdventure.playersList[0];\r\n      CreateAdventure(newAdventure).then(response => console.log('[AdventureCreate response]:', response));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='adventure-create'>\r\n      <span>Название приключения*</span>\r\n      <input onChange={ (event => newAdventure.name = event.target.value) } />\r\n      <span>Описание приключения</span>\r\n      <textarea onChange={ (event => newAdventure.description = event.target.value) } />\r\n      <span>Картинка приключения</span>\r\n      <input placeholder='url' onChange={ (event => newAdventure.image = event.target.value) } />\r\n      <span>Добавить игрока</span>\r\n      <div>\r\n        <input placeholder='email' value={ playerEmail } onChange={ (e) => {setPlayerEmail(e.target.value);} } />\r\n        <button onClick={ () => {\r\n          newAdventure.playersList.push(playerEmail);\r\n          setPlayerEmail('');\r\n        } }>Добавить\r\n        </button>\r\n      </div>\r\n      <h4>Игроки*:</h4>\r\n      { newAdventure.playersList.map(email => <span>{ email }</span>) }\r\n      <h4>Dungeon Master*:</h4>\r\n      { newAdventure.playersList[0] }\r\n      <button onClick={ onSubmit }>Создать приключение</button>\r\n      <span>Errors:</span>\r\n      { errorsList.map(error => <span>{ error }</span>) }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, null)(AdventureCreate);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { GetAllUserAdventures } from '../../api/firebase/firebase';\r\nimport { Adventure } from '../../types/adventure/Adventure';\r\nimport './AdventureList.sass';\r\n\r\nexport const AdventureList = () => {\r\n  const [adventuresList, setAdventuresList] = useState<Adventure[]>([]);\r\n\r\n  GetAllUserAdventures().then((adventures: Adventure[]) => {\r\n    setAdventuresList(adventures);\r\n  });\r\n\r\n  useEffect(() => {\r\n\r\n  });\r\n\r\n  return (\r\n    <div className='adventure-list'>\r\n      Advenure List here\r\n      { adventuresList.map(adventure => <Link to={`view/${adventure.name}`}>{ adventure.name }</Link>) }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, null)(AdventureList);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './AdventureView.sass';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst AdventureView = (props: any) => {\r\n  const { match } = props;\r\n  const { id } = match.params;\r\n\r\n  return (\r\n    <div className='adventure-view'>\r\n      <span>Adventure id {id}</span>\r\n      <Link to={`${id}/character/gremmy`}>Гремми</Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, null)(AdventureView);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './CharacterView.sass';\r\n\r\ninterface CharacterViewProps {\r\n  match: any\r\n}\r\n\r\nconst CharacterView = (props: CharacterViewProps) => {\r\n  const [state, setState] = useState(true);\r\n  const { match } = props;\r\n  const { id } = match.params;\r\n\r\n  useEffect(() => {\r\n    console.log('[CharacterView WORKS!!!]', null);\r\n  }, [state]);\r\n\r\n  return (\r\n    <div className='character-view'>\r\n      <button onClick={ () => setState(!state) }>CharacterView WORKS!!!</button>\r\n      <div>THIS CHARACTER IS <b>{id}</b></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, null)(CharacterView);\r\n","export const actions = {\r\n  userActionTypes: {\r\n    SET_USER: 'SET_USER'\r\n  },\r\n\r\n\r\n\r\n\r\n  // samples\r\n  basic: {\r\n    ADD_QUESTION: 'ADD_QUESTION',\r\n    DELETE_QUESTION: 'DELETE_QUESTION',\r\n    DELETE_SKILL: 'DELETE_SKILL',\r\n    ADD_SKILL: 'ADD_SKILL',\r\n    REORDER_SKILLS: 'REORDER_SKILLS',\r\n    REORDER_QUESTIONS: 'REORDER_QUESTIONS',\r\n    ADD_COMMENT: 'ADD_COMMENT',\r\n    DELETE_COMMENT: 'DELETE_COMMENT',\r\n    UPDATE_COMMENT: 'UPDATE_COMMENT',\r\n    UPDATE_RATING: 'UPDATE_RATING',\r\n    CREATE_ALERT: 'CREATE_ALERT',\r\n    DELETE_ALERT: 'DELETE_ALERT',\r\n    RESET_CHECKLIST_VIEWER: 'RESET_CHECKLIST_VIEWER'\r\n  },\r\n  questions: {\r\n    FETCH_QUESTIONS_LIST: 'FETCH_QUESTIONS_LIST',\r\n    FETCH_QUESTION_INFO: 'FETCH_QUESTION_INFO',\r\n    FETCH_QUESTIONS: 'FETCH_QUESTIONS',\r\n    UPDATE_QUESTION: 'UPDATE_QUESTION',\r\n    CREATE_QUESTION: 'CREATE_QUESTION',\r\n    DELETE_QUESTION: 'DELETE_QUESTIONS',\r\n    IMPORT_QUESTION: 'IMPORT_QUESTIONS'\r\n  }\r\n};\r\n","import { User } from '../../types/user/User';\r\nimport { actions } from '../constants';\r\n\r\nconst { userActionTypes } = actions;\r\n\r\nconst createAction = (type: string, payload: any = null) => {\r\n  return {\r\n    type,\r\n    payload\r\n  };\r\n};\r\n\r\nexport const setUserActionConverter = (user: User) => createAction(userActionTypes.SET_USER, user);\r\n","import { Dispatch } from 'redux';\r\nimport { User } from '../../types/user/User';\r\nimport { setUserActionConverter } from './index';\r\n\r\nexport const setUserAction = (user: User) => async (dispatch: Dispatch) => {\r\n  const userData: User = {\r\n    email: user.email,\r\n  };\r\n  dispatch(setUserActionConverter(userData));\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from '../../../store';\r\nimport firebase from '../../api/firebase/firebase';\r\nimport './Home.sass';\r\nimport { setUserAction } from '../../redux/actions/userActions';\r\nimport { User } from '../../types/user/User';\r\n\r\ninterface Home {\r\n  userData: User,\r\n  setUser: (user: User) => void\r\n}\r\n\r\nexport const Home = (props: Home) => {\r\n  const [userEmail, setUserEmail] = useState('');\r\n  const bodyWidth = document.getElementsByTagName('body')[0].clientWidth;\r\n  const bodyHeight = document.getElementsByTagName('body')[0].clientHeight;\r\n\r\n  useEffect(() => {\r\n    props.setUser({email: userEmail});\r\n  }, [userEmail]);\r\n\r\n  firebase.auth().onAuthStateChanged(() => {\r\n    setUserEmail(firebase.auth().currentUser?.email || '');\r\n  });\r\n\r\n  return (\r\n    <div className='home'>\r\n      <h1>Current user - [{ userEmail }]</h1>\r\n      <button onClick={() => alert(props.userData.email)}>Alert user data email from store</button>\r\n      <button onClick={() => firebase.auth().signOut()}>Sign out</button>\r\n      <button onClick={() => alert(bodyWidth)}>Show client width</button>\r\n      <button onClick={() => alert(bodyHeight)}>Show client height</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect((state: AppState) => ({\r\n  userData: state.userData\r\n}), {\r\n  setUser: setUserAction\r\n})(Home)\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { SignInEmail } from '../../api/firebase/firebase';\r\nimport './SignIn.sass';\r\nimport { setUserAction } from '../../redux/actions/userActions';\r\nimport { User } from '../../types/user/User';\r\n\r\ninterface ISignUp {\r\n  setUser: (user: User) => void;\r\n}\r\n\r\nconst SignIn = (props: ISignUp) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [statusList, setStatus] = useState<string[]>([]);\r\n\r\n  const onSubmit = () => {\r\n    if (statusList.length === 0) SignInEmail(email, password).then(firebaseResponse => {\r\n      if (firebaseResponse.message) setStatus([firebaseResponse.message]);\r\n      if (firebaseResponse.user) {\r\n        const currentUser: User = { email: firebaseResponse.user.email };\r\n        setStatus(['User successfully signed in']);\r\n        props.setUser(currentUser);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onEmailChange = (event: any) => {\r\n    const email = event.target.value;\r\n    setEmail(email);\r\n  };\r\n\r\n  const onPasswordChange = (event: any) => {\r\n    const pass = event.target.value;\r\n    setPassword(pass);\r\n  };\r\n\r\n  return (\r\n    <div className='sign-in'>\r\n      <span>E-mail</span>\r\n      <input value={ email } onChange={ onEmailChange } />\r\n      <span>Password</span>\r\n      <input type='password' value={ password } onChange={ onPasswordChange } />\r\n      { statusList.map(error => <span>{ error }</span>) }\r\n      <button onClick={ onSubmit }>Sign Up</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, {\r\n  setUser: setUserAction\r\n})(SignIn);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { SignUpEmail } from '../../api/firebase/firebase';\r\nimport { setUserAction } from '../../redux/actions/userActions';\r\nimport { User } from '../../types/user/User';\r\nimport './SignUp.sass';\r\n\r\ninterface ISignUp {\r\n  setUser: (user: User) => void;\r\n}\r\n\r\nconst SignUp = (props: ISignUp) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [statusList, setStatus] = useState<string[]>([]);\r\n\r\n  const validation = () => {\r\n    // const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    const re = /\\S+@\\S+\\.\\S+/;\r\n    const validationErrors: string[] = [];\r\n\r\n    if (!re.test(String(email).toLowerCase())) validationErrors.push('The email address is badly formatted.');\r\n    if (password.length < 6) validationErrors.push('Password should be at least 6 characters.');\r\n    setStatus(validationErrors);\r\n    console.log('[validationErrors]:', validationErrors);\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    if (statusList.length === 0) SignUpEmail(email, password).then((firebaseResponse) => {\r\n      if (firebaseResponse.message) setStatus([firebaseResponse.message]);\r\n      if (firebaseResponse.user) {\r\n        const currentUser: User = { email: firebaseResponse.user.email };\r\n        setStatus(['User successfully created and signed in']);\r\n        props.setUser(currentUser);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onEmailChange = (event: any) => {\r\n    const email = event.target.value;\r\n    setEmail(email);\r\n  };\r\n\r\n  const onPasswordChange = (event: any) => {\r\n    const pass = event.target.value;\r\n    setPassword(pass);\r\n  };\r\n\r\n  useEffect(() => {\r\n    validation();\r\n  }, [email, password]);\r\n\r\n  return (\r\n    <div className='sign-up'>\r\n      <span>E-mail</span>\r\n      <input value={ email } onChange={ onEmailChange } />\r\n      <span>Password</span>\r\n      <input type='password' value={ password } onChange={ onPasswordChange } />\r\n      { statusList.map(error => <span>{ error }</span>) }\r\n      <button onClick={ onSubmit }>Sign Up</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, {\r\n  setUser: setUserAction\r\n})(SignUp);\r\n","import 'antd/dist/antd.css';\r\nimport Hammer from 'hammerjs';\r\nimport React, { CSSProperties, useEffect, useState } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport './App.sass';\r\nimport { Header } from './components/Header/Header';\r\nimport { SideMenu } from './components/SideMenu/SideMenu';\r\nimport * as ROUTES from './constants/routes';\r\nimport AdventureCreate from './pages/adventureCreate/AdventureCreate';\r\nimport AdventureList  from './pages/adventureList/AdventureList';\r\nimport AdventureView from './pages/adventureView/AdventureView';\r\nimport CharacterView from './pages/characterView/CharacterView';\r\nimport Home from './pages/home/Home';\r\nimport SignIn from './pages/signIn/SignIn';\r\nimport SignUp from './pages/signUp/SignUp';\r\n\r\nexport const App: React.FC = (props: any) => {\r\n  const bodyWidth = document.getElementsByTagName('body')[0].clientWidth;\r\n  const bodyHeight = document.getElementsByTagName('body')[0].clientHeight;\r\n  const isMobileMenuView = bodyWidth <= 425;\r\n\r\n  const [isMenuCollapsed, setIsMenuCollapsed] = useState(true);\r\n  const [isMenu2Open, setMenu2] = useState(false);\r\n\r\n  const onMenuClick = () => {\r\n    setIsMenuCollapsed(!isMenuCollapsed);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isMobileMenuView) {\r\n      const stage = document.getElementById('root') as HTMLElement;\r\n      const mc = new Hammer(stage);\r\n      mc.on('swipeleft', () => {\r\n        console.log('[swipe left]');\r\n        setIsMenuCollapsed(true);\r\n      });\r\n      mc.on('swiperight', () => {\r\n        console.log('[swipe right]');\r\n        setIsMenuCollapsed(false);\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const appContainerStyles: CSSProperties = {\r\n    width: bodyWidth,\r\n    minWidth: bodyWidth,\r\n    maxWidth: bodyWidth,\r\n    height: bodyHeight,\r\n    minHeight:bodyHeight,\r\n    maxHeight: bodyHeight,\r\n    border: '1px solid red'\r\n  }\r\n\r\n  return (\r\n    <Router basename='/dmt2'>\r\n      <div className='app' style={appContainerStyles}>\r\n        {/*<div className='app__header'>*/}\r\n        {/*  <Header onMenuClick={ onMenuClick } />*/}\r\n        {/*</div>*/}\r\n        <div className='app__content'>\r\n          <Route exact path={ ROUTES.HOME } component={ Home } />\r\n          <Route path={ ROUTES.SIGN_IN } component={ SignIn } />\r\n          <Route path={ ROUTES.SIGN_UP } component={ SignUp } />\r\n          <Route path={ ROUTES.ADVENTURE_CREATE } component={ AdventureCreate } />\r\n          <Route path={ ROUTES.ADVENTURE_LIST } component={ AdventureList } />\r\n          <Route exact path={ ROUTES.ADVENTURE_VIEW } component={ AdventureView } />\r\n          <Route path={ ROUTES.CHARACTER_VIEW } component={ CharacterView } />\r\n        </div>\r\n        <button className='main-menu-button' onClick={() => setMenu2(!isMenu2Open)}>M</button>\r\n        {isMenu2Open && <div className='main-menu2'>\r\n          <SideMenu isMobileMenuView={isMobileMenuView} isMenuCollapsed={!isMenu2Open}/>\r\n        </div>}\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${ process.env.PUBLIC_URL }/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n  .register(swUrl)\r\n  .then(registration => {\r\n    registration.onupdatefound = () => {\r\n      const installingWorker = registration.installing;\r\n      if (installingWorker == null) {\r\n        return;\r\n      }\r\n      installingWorker.onstatechange = () => {\r\n        if (installingWorker.state === 'installed') {\r\n          if (navigator.serviceWorker.controller) {\r\n            // At this point, the updated precached content has been fetched,\r\n            // but the previous service worker will still serve the older\r\n            // content until all client tabs are closed.\r\n            console.log(\r\n              'New content is available and will be used when all ' +\r\n              'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n            );\r\n\r\n            // Execute callback\r\n            if (config && config.onUpdate) {\r\n              config.onUpdate(registration);\r\n            }\r\n          } else {\r\n            // At this point, everything has been precached.\r\n            // It's the perfect time to display a\r\n            // \"Content is cached for offline use.\" message.\r\n            console.log('Content is cached for offline use.');\r\n\r\n            // Execute callback\r\n            if (config && config.onSuccess) {\r\n              config.onSuccess(registration);\r\n            }\r\n          }\r\n        }\r\n      };\r\n    };\r\n  })\r\n  .catch(error => {\r\n    console.error('Error during service worker registration:', error);\r\n  });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n  .then(response => {\r\n    // Ensure service worker exists, and that we really are getting a JS file.\r\n    const contentType = response.headers.get('content-type');\r\n    if (\r\n      response.status === 404 ||\r\n      (contentType != null && contentType.indexOf('javascript') === -1)\r\n    ) {\r\n      // No service worker found. Probably a different app. Reload the page.\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister().then(() => {\r\n          window.location.reload();\r\n        });\r\n      });\r\n    } else {\r\n      // Service worker found. Proceed as normal.\r\n      registerValidSW(swUrl, config);\r\n    }\r\n  })\r\n  .catch(() => {\r\n    console.log(\r\n      'No internet connection found. App is running in offline mode.'\r\n    );\r\n  });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { ActionReducer } from '../../types/General';\r\nimport { User } from '../../types/user/User';\r\nimport { actions } from '../constants';\r\n\r\nconst initialState: User = {\r\n  email: ''\r\n};\r\n\r\nexport const userDataReducer = (state: User = initialState, action: ActionReducer<User>) => {\r\n  const { SET_USER } = actions.userActionTypes;\r\n\r\n  if (action.type === SET_USER ) {\r\n    return { ...action.payload };\r\n  } else return state;\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { userDataReducer } from './userDataReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  userData: userDataReducer,\r\n});\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './app/redux/reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\nconst env = process.env.REACT_APP_NODE_ENV;\r\n\r\nif (env && env === 'development') {\r\n  // @ts-ignore\r\n  middleware.push(logger);\r\n}\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(\r\n    applyMiddleware(...middleware)\r\n  )\r\n);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { App } from './app/App';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './store';\r\n\r\nconst RoutedApp = () => (\r\n  <Provider store={ store }>\r\n    <App />\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(<RoutedApp />, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}