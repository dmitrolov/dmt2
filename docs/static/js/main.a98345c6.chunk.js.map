{"version":3,"sources":["app/components/Header/Header.tsx","app/components/SideMenu/SideMenu.tsx","app/constants/routes.ts","app/api/firebase/firebase.ts","app/redux/constants.ts","app/redux/actions/index.ts","app/redux/actions/userActions.ts","app/pages/home/Home.tsx","app/pages/signIn/SignIn.tsx","app/pages/signUp/SignUp.tsx","app/App.tsx","serviceWorker.ts","app/redux/reducers/userDataReducer.ts","app/redux/reducers/index.ts","store.ts","index.tsx"],"names":["Header","props","className","type","shape","icon","size","onClick","onMenuClick","Item","to","SubMenu","Menu","menuItems","name","link","subItems","SideMenu","mode","inlineCollapsed","isMobileMenuView","isMenuCollapsed","style","marginLeft","renderMenu","options","map","option","key","title","renderMenuItem","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","actions","SET_USER","userActionTypes","setUserActionConverter","user","payload","createAction","setUserAction","dispatch","a","async","userData","email","connect","state","setUser","useState","userEmail","setUserEmail","useEffect","auth","onAuthStateChanged","currentUser","alert","signOut","setEmail","password","setPassword","statusList","setStatus","value","onChange","event","target","pass","error","length","signInWithEmailAndPassword","catch","e","SignInEmail","then","firebaseResponse","message","validationErrors","test","String","toLowerCase","push","console","log","validation","createUserWithEmailAndPassword","SignUpEmail","App","document","getElementsByTagName","clientWidth","setIsMenuCollapsed","stage","getElementById","mc","Hammer","on","basename","exact","path","component","Home","SignIn","SignUp","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","middleware","thunk","env","REACT_APP_NODE_ENV","logger","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a98345c6.chunk.js","sourcesContent":["import { Breadcrumb, Button, Icon } from 'antd';\r\nimport React from 'react';\r\nimport './Header.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface Header {\r\n  onMenuClick: () => void;\r\n}\r\n\r\nexport function Header(props: Header) {\r\n  return (\r\n    <div className='header'>\r\n      <Button type=\"primary\" shape=\"round\" icon=\"menu-fold\" size={ 'default' }\r\n              onClick={ props.onMenuClick } />\r\n      <Breadcrumb className='breadcrumb'>\r\n        <Breadcrumb.Item><Link to={'/'}><Icon type=\"home\" /></Link></Breadcrumb.Item>\r\n        <Breadcrumb.Item><Link to={'/'}><span>Приключения</span></Link></Breadcrumb.Item>\r\n        <Breadcrumb.Item><Link to={'/'}><span>Джадам</span></Link></Breadcrumb.Item>\r\n        <Breadcrumb.Item><Link to={'/'}><span>Персонаж</span></Link></Breadcrumb.Item>\r\n        <Breadcrumb.Item><Link to={'/'}><span>Гремми</span></Link></Breadcrumb.Item>\r\n        <Breadcrumb.Item><Link to={'/'}><span>О персонаже</span></Link></Breadcrumb.Item>\r\n        <Breadcrumb.Item><Link to={'/'}><span>Характеристики</span></Link></Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      {/*<Link to={ '/' }><img className='header__logo' src={ logo } alt=\"\" /></Link>*/ }\r\n      {/*<img className='header__userAvatar' src={ avatar } alt=\"\" />*/ }\r\n    </div>\r\n  );\r\n}\r\n","import { Icon, Menu } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as ROUTES from '../../constants/routes';\r\nimport './SideMenu.scss';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\ninterface SideMenu {\r\n  isMobileMenuView: boolean\r\n  isMenuCollapsed: boolean\r\n}\r\n\r\ninterface MenuItem {\r\n  name: string;\r\n  icon?: string;\r\n  link?: string;\r\n  subItems?: MenuItem[];\r\n}\r\n\r\nconst menuItems: MenuItem[] = [\r\n  {name: 'Home', link: ROUTES.HOME, icon: 'home'},\r\n  {\r\n    icon: 'user', name: 'Аккаунт', subItems: [\r\n      { name: 'Вход', link: ROUTES.SIGN_IN },\r\n      { name: 'Регистрация', link: ROUTES.SIGN_UP }\r\n    ]\r\n  },\r\n  {\r\n    icon: 'crown', name: 'Приключения', subItems: [\r\n      {\r\n        name: 'Джадам', icon: 'crown', subItems: [\r\n          {\r\n            name: 'Список персонажей', icon: 'crown', subItems: [\r\n              {\r\n                name: 'Гремми', icon: 'crown', subItems: [\r\n                  {\r\n                    name: 'О персонаже', icon: 'crown', subItems: [\r\n                      { name: 'Характеристики' }\r\n                    ]\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  { icon: 'thunderbolt', name: 'Заклинания' }\r\n];\r\n\r\nexport const SideMenu = (props: SideMenu) => {\r\n  return (\r\n    <Menu className='side-menu'\r\n          mode=\"inline\"\r\n          inlineCollapsed={ props.isMobileMenuView ? false : props.isMenuCollapsed }\r\n          style={ props.isMobileMenuView && props.isMenuCollapsed ? { marginLeft: -240 } : { marginLeft: 0 } }>\r\n      { renderMenu(menuItems) }\r\n    </Menu>\r\n  );\r\n};\r\n\r\nconst renderMenuItem = (option: MenuItem) => {\r\n  return (\r\n    <Menu.Item key={ option.name }>\r\n      <Link to={ option.link || ROUTES.HOME }>\r\n        { option.icon && <Icon type={ option.icon } /> }\r\n        <span>{ option.name }</span>\r\n      </Link>\r\n    </Menu.Item>\r\n  );\r\n};\r\n\r\nconst renderMenu = (options: MenuItem[]) => {\r\n  return options.map((option: MenuItem) => {\r\n    return option.subItems\r\n      ?\r\n      <SubMenu key={ option.name } title={\r\n        <span>\r\n          <Icon type={ option.icon } />\r\n          <span>{ option.name }</span>\r\n        </span>\r\n      }>\r\n        { renderMenu(option.subItems) }\r\n      </SubMenu>\r\n      :\r\n      renderMenuItem(option);\r\n  });\r\n};\r\n","export const HOME = '/';\r\nexport const SIGN_UP = '/signup';\r\nexport const SIGN_IN = '/signin';\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nconst config = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const SignUpEmail = (email: string, password: string) => {\r\n  return firebase.auth()\r\n  .createUserWithEmailAndPassword(email, password)\r\n  .catch((e: any) => {\r\n    return e;\r\n  });\r\n};\r\n\r\nexport const SignInEmail = (email: string, password: string) => {\r\n  return firebase.auth()\r\n  .signInWithEmailAndPassword(email, password)\r\n  .catch((e: any) => {\r\n    return e;\r\n  });\r\n};\r\n\r\nexport const getAllChars = () => {\r\n  return firebase.firestore()\r\n  .collection('playerCharacters')\r\n  .get()\r\n  .then((characters) => {\r\n    let allChars = [];\r\n    characters.forEach((doc) => {\r\n      allChars.push(doc.data());\r\n    });\r\n    return characters.docs.map((doc) => {\r\n      return { id: doc.id, ...doc.data() };\r\n    });\r\n  });\r\n};\r\n\r\nexport default firebase;\r\n","export const actions = {\r\n  userActionTypes: {\r\n    SET_USER: 'SET_USER'\r\n  },\r\n\r\n\r\n\r\n\r\n  // samples\r\n  basic: {\r\n    ADD_QUESTION: 'ADD_QUESTION',\r\n    DELETE_QUESTION: 'DELETE_QUESTION',\r\n    DELETE_SKILL: 'DELETE_SKILL',\r\n    ADD_SKILL: 'ADD_SKILL',\r\n    REORDER_SKILLS: 'REORDER_SKILLS',\r\n    REORDER_QUESTIONS: 'REORDER_QUESTIONS',\r\n    ADD_COMMENT: 'ADD_COMMENT',\r\n    DELETE_COMMENT: 'DELETE_COMMENT',\r\n    UPDATE_COMMENT: 'UPDATE_COMMENT',\r\n    UPDATE_RATING: 'UPDATE_RATING',\r\n    CREATE_ALERT: 'CREATE_ALERT',\r\n    DELETE_ALERT: 'DELETE_ALERT',\r\n    RESET_CHECKLIST_VIEWER: 'RESET_CHECKLIST_VIEWER'\r\n  },\r\n  questions: {\r\n    FETCH_QUESTIONS_LIST: 'FETCH_QUESTIONS_LIST',\r\n    FETCH_QUESTION_INFO: 'FETCH_QUESTION_INFO',\r\n    FETCH_QUESTIONS: 'FETCH_QUESTIONS',\r\n    UPDATE_QUESTION: 'UPDATE_QUESTION',\r\n    CREATE_QUESTION: 'CREATE_QUESTION',\r\n    DELETE_QUESTION: 'DELETE_QUESTIONS',\r\n    IMPORT_QUESTION: 'IMPORT_QUESTIONS'\r\n  }\r\n};\r\n","import { User } from '../../types/user/User';\r\nimport { actions } from '../constants';\r\n\r\nconst { userActionTypes } = actions;\r\n\r\nconst createAction = (type: string, payload: any = null) => {\r\n  return {\r\n    type,\r\n    payload\r\n  };\r\n};\r\n\r\nexport const setUserActionConverter = (user: User) => createAction(userActionTypes.SET_USER, user);\r\n","import { Dispatch } from 'redux';\r\nimport { User } from '../../types/user/User';\r\nimport { setUserActionConverter } from './index';\r\n\r\nexport const setUserAction = (user: User) => async (dispatch: Dispatch) => {\r\n  const userData: User = {\r\n    email: user.email,\r\n  };\r\n  dispatch(setUserActionConverter(userData));\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from '../../../store';\r\nimport firebase from '../../api/firebase/firebase';\r\nimport './Home.sass';\r\nimport { setUserAction } from '../../redux/actions/userActions';\r\nimport { User } from '../../types/user/User';\r\n\r\ninterface Home {\r\n  userData: User,\r\n  setUser: (user: User) => void\r\n}\r\n\r\nexport const Home = (props: Home) => {\r\n  const [userEmail, setUserEmail] = useState('');\r\n\r\n  useEffect(() => {\r\n    props.setUser({email: userEmail});\r\n  }, [userEmail]);\r\n\r\n  firebase.auth().onAuthStateChanged(() => {\r\n    setUserEmail(firebase.auth().currentUser?.email || '');\r\n  });\r\n\r\n  return (\r\n    <div className='home'>\r\n      <h1>Current user - [{ userEmail }]</h1>\r\n      <button onClick={() => alert(props.userData.email)}>Alert user data email from store</button>\r\n      <button onClick={() => firebase.auth().signOut()}>Sign out</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect((state: AppState) => ({\r\n  userData: state.userData\r\n}), {\r\n  setUser: setUserAction\r\n})(Home)\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { SignInEmail } from '../../api/firebase/firebase';\r\nimport './SignIn.sass';\r\nimport { setUserAction } from '../../redux/actions/userActions';\r\nimport { User } from '../../types/user/User';\r\n\r\ninterface ISignUp {\r\n  setUser: (user: User) => void;\r\n}\r\n\r\nconst SignIn = (props: ISignUp) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [statusList, setStatus] = useState<string[]>([]);\r\n\r\n  const onSubmit = () => {\r\n    if (statusList.length === 0) SignInEmail(email, password).then(firebaseResponse => {\r\n      if (firebaseResponse.message) setStatus([firebaseResponse.message]);\r\n      if (firebaseResponse.user) {\r\n        const currentUser: User = { email: firebaseResponse.user.email };\r\n        setStatus(['User successfully signed in']);\r\n        props.setUser(currentUser);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onEmailChange = (event: any) => {\r\n    const email = event.target.value;\r\n    setEmail(email);\r\n  };\r\n\r\n  const onPasswordChange = (event: any) => {\r\n    const pass = event.target.value;\r\n    setPassword(pass);\r\n  };\r\n\r\n  return (\r\n    <div className='sign-in'>\r\n      <span>E-mail</span>\r\n      <input value={ email } onChange={ onEmailChange } />\r\n      <span>Password</span>\r\n      <input type='password' value={ password } onChange={ onPasswordChange } />\r\n      { statusList.map(error => <span>{ error }</span>) }\r\n      <button onClick={ onSubmit }>Sign Up</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, {\r\n  setUser: setUserAction\r\n})(SignIn);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { SignUpEmail } from '../../api/firebase/firebase';\r\nimport { setUserAction } from '../../redux/actions/userActions';\r\nimport { User } from '../../types/user/User';\r\nimport './SignUp.sass';\r\n\r\ninterface ISignUp {\r\n  setUser: (user: User) => void;\r\n}\r\n\r\nconst SignUp = (props: ISignUp) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [statusList, setStatus] = useState<string[]>([]);\r\n\r\n  const validation = () => {\r\n    // const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    const re = /\\S+@\\S+\\.\\S+/;\r\n    const validationErrors: string[] = [];\r\n\r\n    if (!re.test(String(email).toLowerCase())) validationErrors.push('The email address is badly formatted.');\r\n    if (password.length < 6) validationErrors.push('Password should be at least 6 characters.');\r\n    setStatus(validationErrors);\r\n    console.log('[validationErrors]:', validationErrors);\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    if (statusList.length === 0) SignUpEmail(email, password).then((firebaseResponse) => {\r\n      if (firebaseResponse.message) setStatus([firebaseResponse.message]);\r\n      if (firebaseResponse.user) {\r\n        const currentUser: User = { email: firebaseResponse.user.email };\r\n        setStatus(['User successfully created and signed in']);\r\n        props.setUser(currentUser);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onEmailChange = (event: any) => {\r\n    const email = event.target.value;\r\n    setEmail(email);\r\n  };\r\n\r\n  const onPasswordChange = (event: any) => {\r\n    const pass = event.target.value;\r\n    setPassword(pass);\r\n  };\r\n\r\n  useEffect(() => {\r\n    validation();\r\n  }, [email, password]);\r\n\r\n  return (\r\n    <div className='sign-up'>\r\n      <span>E-mail</span>\r\n      <input value={ email } onChange={ onEmailChange } />\r\n      <span>Password</span>\r\n      <input type='password' value={ password } onChange={ onPasswordChange } />\r\n      { statusList.map(error => <span>{ error }</span>) }\r\n      <button onClick={ onSubmit }>Sign Up</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, {\r\n  setUser: setUserAction\r\n})(SignUp);\r\n","import 'antd/dist/antd.css';\r\nimport Hammer from 'hammerjs';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport './App.scss';\r\nimport { Header } from './components/Header/Header';\r\nimport { SideMenu } from './components/SideMenu/SideMenu';\r\nimport * as ROUTES from './constants/routes';\r\nimport Home  from './pages/home/Home';\r\nimport SignIn from './pages/signIn/SignIn';\r\nimport SignUp from './pages/signUp/SignUp';\r\n\r\nexport const App: React.FC = (props: any) => {\r\n  const bodyWidth = document.getElementsByTagName('body')[0].clientWidth;\r\n  // const bodyHeight = document.getElementsByTagName('body')[0].clientHeight;\r\n  const isMobileMenuView = bodyWidth <= 425;\r\n\r\n  const [isMenuCollapsed, setIsMenuCollapsed] = useState(true);\r\n\r\n  const onMenuClick = () => {\r\n    setIsMenuCollapsed(!isMenuCollapsed);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isMobileMenuView) {\r\n      const stage = document.getElementById('root') as HTMLElement;\r\n      const mc = new Hammer(stage);\r\n      mc.on('swipeleft', () => {\r\n        console.log('[swipe left]');\r\n        setIsMenuCollapsed(true);\r\n      });\r\n      mc.on('swiperight', () => {\r\n        console.log('[swipe right]');\r\n        setIsMenuCollapsed(false);\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Router basename='/dmt2'>\r\n      <div className='app'>\r\n        <div className='app__header'>\r\n          <Header onMenuClick={ onMenuClick } />\r\n        </div>\r\n        <div className='app__content'>\r\n          <SideMenu isMobileMenuView={ isMobileMenuView } isMenuCollapsed={ isMenuCollapsed } />\r\n          <Route exact path={ ROUTES.HOME } component={ Home } />\r\n          <Route path={ ROUTES.SIGN_IN } component={ SignIn } />\r\n          <Route path={ ROUTES.SIGN_UP } component={ SignUp } />\r\n        </div>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${ process.env.PUBLIC_URL }/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n  .register(swUrl)\r\n  .then(registration => {\r\n    registration.onupdatefound = () => {\r\n      const installingWorker = registration.installing;\r\n      if (installingWorker == null) {\r\n        return;\r\n      }\r\n      installingWorker.onstatechange = () => {\r\n        if (installingWorker.state === 'installed') {\r\n          if (navigator.serviceWorker.controller) {\r\n            // At this point, the updated precached content has been fetched,\r\n            // but the previous service worker will still serve the older\r\n            // content until all client tabs are closed.\r\n            console.log(\r\n              'New content is available and will be used when all ' +\r\n              'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n            );\r\n\r\n            // Execute callback\r\n            if (config && config.onUpdate) {\r\n              config.onUpdate(registration);\r\n            }\r\n          } else {\r\n            // At this point, everything has been precached.\r\n            // It's the perfect time to display a\r\n            // \"Content is cached for offline use.\" message.\r\n            console.log('Content is cached for offline use.');\r\n\r\n            // Execute callback\r\n            if (config && config.onSuccess) {\r\n              config.onSuccess(registration);\r\n            }\r\n          }\r\n        }\r\n      };\r\n    };\r\n  })\r\n  .catch(error => {\r\n    console.error('Error during service worker registration:', error);\r\n  });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n  .then(response => {\r\n    // Ensure service worker exists, and that we really are getting a JS file.\r\n    const contentType = response.headers.get('content-type');\r\n    if (\r\n      response.status === 404 ||\r\n      (contentType != null && contentType.indexOf('javascript') === -1)\r\n    ) {\r\n      // No service worker found. Probably a different app. Reload the page.\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister().then(() => {\r\n          window.location.reload();\r\n        });\r\n      });\r\n    } else {\r\n      // Service worker found. Proceed as normal.\r\n      registerValidSW(swUrl, config);\r\n    }\r\n  })\r\n  .catch(() => {\r\n    console.log(\r\n      'No internet connection found. App is running in offline mode.'\r\n    );\r\n  });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { ActionReducer } from '../../types/General';\r\nimport { User } from '../../types/user/User';\r\nimport { actions } from '../constants';\r\n\r\nconst initialState: User = {\r\n  email: ''\r\n};\r\n\r\nexport const userDataReducer = (state: User = initialState, action: ActionReducer<User>) => {\r\n  const { SET_USER } = actions.userActionTypes;\r\n\r\n  if (action.type === SET_USER ) {\r\n    return { ...action.payload };\r\n  } else return state;\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { userDataReducer } from './userDataReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  userData: userDataReducer,\r\n});\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './app/redux/reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\nconst env = process.env.REACT_APP_NODE_ENV;\r\n\r\nif (env && env === 'development') {\r\n  // @ts-ignore\r\n  middleware.push(logger);\r\n}\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(\r\n    applyMiddleware(...middleware)\r\n  )\r\n);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { App } from './app/App';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './store';\r\n\r\nconst RoutedApp = () => (\r\n  <Provider store={ store }>\r\n    <App />\r\n  </Provider>\r\n\r\n);\r\n\r\nReactDOM.render(<RoutedApp />, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}