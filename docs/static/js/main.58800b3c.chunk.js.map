{"version":3,"sources":["app/redux/constants.ts","app/redux/reducers/userDataReducer.ts","app/redux/reducers/windowDataReducer.ts","app/redux/reducers/index.ts","store.ts","app/api/firebase.ts","app/redux/actions/index.ts","app/redux/actions/userActions.ts","app/pages/home/Home.tsx","app/pages/signIn/SignIn.tsx","app/pages/signUp/SignUp.tsx","app/pages/adventureCreate/AdventureCreate.tsx","app/routes.ts","app/pages/adventureList/AdventureList.tsx","app/pages/adventureView/AdventureView.tsx","app/pages/characterCreate/CharacterCreate.tsx","app/pages/characterView/characterInfoSection/characterGeneralInfo.tsx","app/pages/characterView/GameMenu/GameMenu.tsx","app/pages/characterView/characterInfoSection/helpers.ts","app/pages/characterView/characterInfoSection/characterAttributes.tsx","app/pages/characterView/characterInfoSection/characterExperience.tsx","app/pages/characterView/characterInfoSection/characterProficiency.tsx","app/pages/characterView/characterInfoSection/characterCombat.tsx","app/pages/characterView/characterEquipmentSection/characterEquipment.tsx","app/pages/characterView/CharacterView.tsx","app/common/SideMenu/SideMenu.tsx","app/App.tsx","app/redux/actions/windowActions.ts","index.tsx"],"names":["actions","SET_USER","GET_RESOLUTION","initialState","email","width","height","isMobile","isLandscape","rootReducer","combineReducers","userData","state","action","type","payload","windowData","middleware","thunk","env","process","REACT_APP_NODE_ENV","push","logger","store","createStore","composeWithDevTools","applyMiddleware","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","getAdventure","docName","a","firestore","collection","doc","get","character","data","getCharacter","userActionTypes","windowActionTypes","createAction","setUserActionConverter","user","setUserAction","dispatch","connect","setUser","props","useState","userEmail","setUserEmail","bodyWidth","document","getElementsByTagName","clientWidth","bodyHeight","clientHeight","useEffect","auth","onAuthStateChanged","currentUser","className","onClick","alert","signOut","setEmail","password","setPassword","statusList","setStatus","history","useHistory","value","onChange","event","target","pass","map","error","length","signInWithEmailAndPassword","catch","e","SignInEmail","then","firebaseResponse","message","validation","useCallback","validationErrors","test","String","toLowerCase","console","log","createUserWithEmailAndPassword","SignUpEmail","newAdventure","name","description","image","playersList","dungeonMaster","charactersList","itemsList","notes","customCounter","playerEmail","setPlayerEmail","errorsList","setErrorsList","currentErrors","placeholder","set","response","adventuresList","setAdventuresList","adventures","docs","adventure","to","id","match","params","setState","CharacterGeneralInfoSection","info","style","objectFit","objectPosition","src","imageUrl","alt","title","showHeader","pagination","columns","dataIndex","key","dataSource","playerName","characterName","subRace","sex","age","human","weight","background","generalInfoMenuTabs","caption","journalMenuTabs","equipmentMenuTabs","abilitiesMenuTabs","renderSubmenu","tabs","tab","Item","setCharacterViewTab","children","portraitMenu","overlay","icon","overlayStyle","flexDirection","justifyContent","calculateAttributeBonus","Math","round","CharacterAttributesSection","attributes","skills","render","skillsProficiency","skill","color","count","strength","bonus","Athletics","dexterity","Acrobatics","SleightOfHand","Stealth","constitution","Endurance","intelligence","Investigation","History","Arcana","Nature","Religion","wisdom","Perception","Survival","Medicine","Insight","AnimalHandling","charisma","Performance","Intimidation","Deception","Persuasion","CharacterExperienceSection","classes","characterClass","level","feats","feat","experience","inspiration","CharacterProficiencySection","proficiency","display","flexWrap","marginBottom","languages","tools","weapons","armor","CharacterCombatSection","stats","effects","armorClass","initiative","speed","size","darkVision","hitPoints","max","temp","current","deathSaves","successes","failures","args","savingThrows","resistance","immunity","TextArea","Input","CharacterEquipmentSection","equipment","setAdventure","isButtonOpen","setIsButtonOpen","onFinish","values","nextAdventure","newItem","cost","en","ru","rarity","onFinishFailed","errors","rules","required","autoSize","htmlType","sorter","b","expandedRowRender","record","trunc","undefined","item","setCharacter","currentTab","setCurrentTab","overflow","generalInfo","about","combat","renderTab","isMenuCollapsed","renderMenuItem","route","staticItem","text","renderMenuList","checked","visible","isMenuOpened","onClose","onKeyDown","setWindow","documentElement","setProperty","body","resolution","window","onresize","exact","path","component","Home","SignIn","SignUp","AdventureCreate","AdventureList","AdventureView","CharacterCreate","CharacterView","RoutedApp","basename","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.58800b3c.chunk.js","sourcesContent":["export const actions = {\r\n  userActionTypes: {\r\n    SET_USER: 'SET_USER'\r\n  },\r\n  windowActionTypes: {\r\n    GET_RESOLUTION: 'GET_RESOLUTION'\r\n  },\r\n\r\n\r\n\r\n\r\n  // samples\r\n  basic: {\r\n    ADD_QUESTION: 'ADD_QUESTION',\r\n    DELETE_QUESTION: 'DELETE_QUESTION',\r\n    DELETE_SKILL: 'DELETE_SKILL',\r\n    ADD_SKILL: 'ADD_SKILL',\r\n    REORDER_SKILLS: 'REORDER_SKILLS',\r\n    REORDER_QUESTIONS: 'REORDER_QUESTIONS',\r\n    ADD_COMMENT: 'ADD_COMMENT',\r\n    DELETE_COMMENT: 'DELETE_COMMENT',\r\n    UPDATE_COMMENT: 'UPDATE_COMMENT',\r\n    UPDATE_RATING: 'UPDATE_RATING',\r\n    CREATE_ALERT: 'CREATE_ALERT',\r\n    DELETE_ALERT: 'DELETE_ALERT',\r\n    RESET_CHECKLIST_VIEWER: 'RESET_CHECKLIST_VIEWER'\r\n  },\r\n  questions: {\r\n    FETCH_QUESTIONS_LIST: 'FETCH_QUESTIONS_LIST',\r\n    FETCH_QUESTION_INFO: 'FETCH_QUESTION_INFO',\r\n    FETCH_QUESTIONS: 'FETCH_QUESTIONS',\r\n    UPDATE_QUESTION: 'UPDATE_QUESTION',\r\n    CREATE_QUESTION: 'CREATE_QUESTION',\r\n    DELETE_QUESTION: 'DELETE_QUESTIONS',\r\n    IMPORT_QUESTION: 'IMPORT_QUESTIONS'\r\n  }\r\n};\r\n","import { ActionReducer } from '../../types/general';\r\nimport { actions } from '../constants';\r\nimport { User } from '../../types/user';\r\n\r\nconst initialState: User = {\r\n  email: ''\r\n};\r\n\r\nexport const userDataReducer: (state: User, action: ActionReducer<User>) => User = (state = initialState, action) => {\r\n  const { SET_USER } = actions.userActionTypes;\r\n\r\n  if (action.type === SET_USER) {\r\n    return { ...action.payload };\r\n  } else return state;\r\n};\r\n","import { ActionReducer } from \"../../types/general\";\r\nimport { actions } from \"../constants\";\r\n\r\ninterface ClientWindowResolution {\r\n    width: number;\r\n    height: number;\r\n    isMobile: boolean;\r\n    isLandscape: boolean;\r\n}\r\n\r\nconst initialState: ClientWindowResolution = {\r\n    width: 0,\r\n    height: 0,\r\n    isMobile: false,\r\n    isLandscape: false\r\n}\r\n\r\nexport const windowDataReducer: (state: ClientWindowResolution, action: ActionReducer<ClientWindowResolution>) => ClientWindowResolution = (state = initialState, action) => {\r\n    const { GET_RESOLUTION } = actions.windowActionTypes\r\n\r\n    if (action.type === GET_RESOLUTION) {\r\n        return { ...action.payload }\r\n    } else return state\r\n}","import { combineReducers } from 'redux';\r\nimport { userDataReducer } from './userDataReducer';\r\nimport { windowDataReducer } from './windowDataReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    userData: userDataReducer,\r\n    windowData: windowDataReducer,\r\n});\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './app/redux/reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\nconst env = process.env.REACT_APP_NODE_ENV;\r\n\r\nif (env && env === 'development') {\r\n  // @ts-ignore\r\n  middleware.push(logger);\r\n}\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(\r\n    applyMiddleware(...middleware)\r\n  )\r\n);\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport { Adventure } from '../types/adventure';\r\nimport { Character } from '../types/adventure/character';\r\n\r\nconst config = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\n// Autorization\r\nexport const SignUpEmail = (email: string, password: string) => {\r\n  return firebase.auth()\r\n    .createUserWithEmailAndPassword(email, password)\r\n    .catch((e: any) => {\r\n      return e;\r\n    });\r\n};\r\n\r\nexport const SignInEmail = (email: string, password: string) => {\r\n  return firebase.auth()\r\n    .signInWithEmailAndPassword(email, password)\r\n    .catch((e: any) => {\r\n      return e;\r\n    });\r\n};\r\n\r\n// Adventures\r\nexport const CreateAdventure = (newAdventure: Adventure) => {\r\n  return firebase.firestore()\r\n    .collection('adventures')\r\n    .doc(newAdventure.name)\r\n    .set({ ...newAdventure })\r\n};\r\n\r\nexport const getAdventure: (docName: string) => Promise<Adventure | undefined> = async (docName) => {\r\n  const character = await firebase.firestore()\r\n    .collection('adventures')\r\n    .doc(docName)\r\n    .get();\r\n  return character.data() as Adventure;\r\n}\r\n\r\nexport const GetAllUserAdventures: () => Promise<Adventure[]> = () => {\r\n  return firebase.firestore()\r\n    .collection('adventures')\r\n    .get()\r\n    .then(adventures => {\r\n      return adventures.docs.map(doc => {\r\n        return doc.data() as Adventure;\r\n      })\r\n    })\r\n};\r\n\r\nexport const setAdventureToDB = (docName: string, data: Adventure) => {\r\n  console.log(data)\r\n  firebase.firestore()\r\n    .collection('adventures')\r\n    .doc(docName)\r\n    .set(data)\r\n}\r\n\r\n// Characters\r\nexport const getCharacter: (docName: string) => Promise<Character | undefined> = async (docName) => {\r\n  const character = await firebase.firestore()\r\n    .collection('playerCharacters')\r\n    .doc(docName)\r\n    .get();\r\n  return character.data() as Character;\r\n}\r\n\r\nexport const setCharacterToDB = (docName: string, data: Character) => {\r\n  firebase.firestore()\r\n    .collection('playerCharacters')\r\n    .doc(docName)\r\n    .set(data)\r\n}\r\n\r\nexport const getAllChars = () => {\r\n  return firebase.firestore()\r\n    .collection('playerCharacters')\r\n    .get()\r\n    .then((characters) => {\r\n      return characters.docs.map((doc) => {\r\n        return { id: doc.id, ...doc.data() };\r\n      });\r\n    });\r\n};\r\n\r\nexport default firebase;\r\n","import { ClientWindowResolution } from '../../types/general';\r\nimport { User } from '../../types/user';\r\nimport { actions } from '../constants';\r\n\r\nconst { userActionTypes, windowActionTypes } = actions;\r\n\r\nconst createAction = (type: string, payload: any = null) => {\r\n  return {\r\n    type,\r\n    payload\r\n  };\r\n};\r\n\r\nexport const setUserActionConverter = (user: User) => createAction(userActionTypes.SET_USER, user);\r\nexport const setWindowActionConverter = (resolution: ClientWindowResolution) => createAction(windowActionTypes.GET_RESOLUTION, resolution);\r\n","import { Dispatch } from 'redux';\r\nimport { User } from '../../types/user';\r\nimport { setUserActionConverter } from './index';\r\n\r\nexport const setUserAction: (user: User) => (dispatch: Dispatch) => Promise<void> = (user) => async (dispatch) => {\r\n  const userData: User = {\r\n    email: user.email,\r\n  };\r\n  dispatch(setUserActionConverter(userData));\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from '../../../store';\r\nimport firebase from '../../api/firebase';\r\nimport './Home.sass';\r\nimport { setUserAction } from '../../redux/actions/userActions';\r\nimport { User } from '../../types/user';\r\n\r\ninterface Home {\r\n  userData: User,\r\n  setUser: (user: User) => void\r\n}\r\n\r\nexport const Home = (props: Home) => {\r\n  const { setUser } = props;\r\n  const [userEmail, setUserEmail] = useState('');\r\n  const bodyWidth = document.getElementsByTagName('body')[0].clientWidth;\r\n  const bodyHeight = document.getElementsByTagName('body')[0].clientHeight;\r\n\r\n  useEffect(() => {\r\n    setUser({ email: userEmail });\r\n  }, [setUser, userEmail]);\r\n\r\n  firebase.auth().onAuthStateChanged(() => {\r\n    setUserEmail(firebase.auth().currentUser?.email || '');\r\n  });\r\n\r\n  return (\r\n    <div className='home'>\r\n      <h1>Current user - [{userEmail}]</h1>\r\n      <button onClick={() => alert(props.userData.email)}>Alert user data email from store</button>\r\n      <button onClick={() => firebase.auth().signOut()}>Sign out</button>\r\n      <button onClick={() => alert(bodyWidth)}>Show client width</button>\r\n      <button onClick={() => alert(bodyHeight)}>Show client height</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect((state: AppState) => ({\r\n  userData: state.userData\r\n}), {\r\n  setUser: setUserAction\r\n})(Home)\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { SignInEmail } from '../../api/firebase';\r\nimport './SignIn.sass';\r\nimport { setUserAction } from '../../redux/actions/userActions';\r\nimport { User } from '../../types/user';\r\n\r\ninterface ISignUp {\r\n  setUser: (user: User) => void;\r\n}\r\n\r\nconst SignIn = (props: ISignUp) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [statusList, setStatus] = useState<string[]>([]);\r\n  const history = useHistory()\r\n\r\n  const onSubmit = () => {\r\n    if (statusList.length === 0) SignInEmail(email, password).then(firebaseResponse => {\r\n      if (firebaseResponse.message) setStatus([firebaseResponse.message]);\r\n      if (firebaseResponse.user) {\r\n        const currentUser: User = { email: firebaseResponse.user.email };\r\n        setStatus(['User successfully signed in']);\r\n        props.setUser(currentUser);\r\n        history.push('/')\r\n      }\r\n    });\r\n  };\r\n\r\n  const onEmailChange = (event: any) => {\r\n    const email = event.target.value;\r\n    setEmail(email);\r\n  };\r\n\r\n  const onPasswordChange = (event: any) => {\r\n    const pass = event.target.value;\r\n    setPassword(pass);\r\n  };\r\n\r\n  return (\r\n    <div className='sign-in'>\r\n      <span>E-mail</span>\r\n      <input value={ email } onChange={ onEmailChange } />\r\n      <span>Password</span>\r\n      <input type='password' value={ password } onChange={ onPasswordChange } />\r\n      { statusList.map(error => <span>{ error }</span>) }\r\n      <button onClick={ onSubmit }>Sign Up</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, {\r\n  setUser: setUserAction\r\n})(SignIn);\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { SignUpEmail } from '../../api/firebase';\r\nimport { setUserAction } from '../../redux/actions/userActions';\r\nimport { User } from '../../types/user';\r\nimport './SignUp.sass';\r\n\r\ninterface ISignUp {\r\n  setUser: (user: User) => void;\r\n}\r\n\r\nconst SignUp = (props: ISignUp) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [statusList, setStatus] = useState<string[]>([]);\r\n  const history = useHistory();\r\n\r\n  const validation = useCallback(() => {\r\n    // const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    const re = /\\S+@\\S+\\.\\S+/;\r\n    const validationErrors: string[] = [];\r\n\r\n    if (!re.test(String(email).toLowerCase())) validationErrors.push('The email address is badly formatted.');\r\n    if (password.length < 6) validationErrors.push('Password should be at least 6 characters.');\r\n    setStatus(validationErrors);\r\n    console.log('[validationErrors]:', validationErrors);\r\n  }, [email, password.length]);\r\n\r\n  const onSubmit = () => {\r\n    if (statusList.length === 0) SignUpEmail(email, password).then((firebaseResponse) => {\r\n      if (firebaseResponse.message) setStatus([firebaseResponse.message]);\r\n      if (firebaseResponse.user) {\r\n        const currentUser: User = { email: firebaseResponse.user.email };\r\n        setStatus(['User successfully created and signed in']);\r\n        props.setUser(currentUser);\r\n        history.push('/')\r\n      }\r\n    });\r\n  };\r\n\r\n  const onEmailChange = (event: any) => {\r\n    const email = event.target.value;\r\n    setEmail(email);\r\n  };\r\n\r\n  const onPasswordChange = (event: any) => {\r\n    const pass = event.target.value;\r\n    setPassword(pass);\r\n  };\r\n\r\n  useEffect(() => {\r\n    validation();\r\n  }, [email, password, validation]);\r\n\r\n  return (\r\n    <div className='sign-up'>\r\n      <span>E-mail</span>\r\n      <input value={ email } onChange={ onEmailChange } />\r\n      <span>Password</span>\r\n      <input type='password' value={ password } onChange={ onPasswordChange } />\r\n      { statusList.map(error => <span>{ error }</span>) }\r\n      <button onClick={ onSubmit }>Sign Up</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, {\r\n  setUser: setUserAction\r\n})(SignUp);\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { CreateAdventure } from '../../api/firebase';\r\nimport { Adventure } from '../../types/adventure';\r\nimport * as ROUTES from '../../routes';\r\nimport './AdventureCreate.sass';\r\n\r\nconst newAdventure: Adventure = {\r\n  name: '',\r\n  description: '',\r\n  image: '',\r\n  playersList: [],\r\n  dungeonMaster: '',\r\n  charactersList: [],\r\n  itemsList:[],\r\n  notes: [],\r\n  customCounter: 1,\r\n};\r\n\r\nconst AdventureCreate = () => {\r\n  const [playerEmail, setPlayerEmail] = useState('');\r\n  const [errorsList, setErrorsList] = useState(['']);\r\n  const history = useHistory();\r\n  const currentErrors: string[] = [];\r\n\r\n  const validation = () => {\r\n    if (newAdventure.name.length === 0) currentErrors.push('Adventure name should not be empty');\r\n    if (newAdventure.playersList.length === 0) currentErrors.push('Players list should not be empty');\r\n    setErrorsList(currentErrors);\r\n    console.log('[currentErrors]:', currentErrors);\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    validation();\r\n    if (currentErrors.length === 0) {\r\n      newAdventure.dungeonMaster = newAdventure.playersList[0];\r\n      CreateAdventure(newAdventure).then(response => console.log('[AdventureCreate response]:', response));\r\n      history.push(ROUTES.ADVENTURE_LIST);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='adventure-create'>\r\n      <span>Название приключения*</span>\r\n      <input onChange={ (event => newAdventure.name = event.target.value) } />\r\n      <span>Описание приключения</span>\r\n      <textarea onChange={ (event => newAdventure.description = event.target.value) } />\r\n      <span>Картинка приключения</span>\r\n      <input placeholder='url' onChange={ (event => newAdventure.image = event.target.value) } />\r\n      <span>Добавить игрока</span>\r\n      <div>\r\n        <input placeholder='email' value={ playerEmail } onChange={ (e) => {setPlayerEmail(e.target.value);} } />\r\n        <button onClick={ () => {\r\n          newAdventure.playersList.push(playerEmail);\r\n          setPlayerEmail('');\r\n        } }>Добавить\r\n        </button>\r\n      </div>\r\n      <h4>Игроки*:</h4>\r\n      { newAdventure.playersList.map(email => <span>{ email }</span>) }\r\n      <h4>Dungeon Master*:</h4>\r\n      { newAdventure.playersList[0] }\r\n      <button onClick={ onSubmit }>Создать приключение</button>\r\n      <span>Errors:</span>\r\n      { errorsList.map(error => <span>{ error }</span>) }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, null)(AdventureCreate);\r\n","export const ROOT = '/';\r\nexport const DASHBOARD = '/dashboard';\r\nexport const SIGN_UP = '/signup';\r\nexport const SIGN_IN = '/signin';\r\nexport const ADVENTURE_CREATE = '/adventure/create';\r\nexport const ADVENTURE_LIST = '/adventure/list';\r\nexport const ADVENTURE_VIEW = '/adventure/view/:id';\r\n\r\nexport const GAME = '/game';\r\nexport const CHARACTER_CREATE = '/game/adventure/view/:id/character/create';\r\nexport const CHARACTER_VIEW = '/game/adventure/view/:id/character/view/:id';","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { GetAllUserAdventures } from '../../api/firebase';\r\nimport { Adventure } from '../../types/adventure';\r\nimport './AdventureList.sass';\r\n\r\nexport const AdventureList = () => {\r\n  const [adventuresList, setAdventuresList] = useState<Adventure[]>([]);\r\n\r\n  GetAllUserAdventures().then((adventures: Adventure[]) => {\r\n    setAdventuresList(adventures);\r\n  });\r\n\r\n  useEffect(() => {\r\n\r\n  });\r\n\r\n  return (\r\n    <div className='adventure-list'>\r\n      Advenure List here\r\n      { adventuresList.map(adventure => <Link to={`view/${adventure.name}`}>{ adventure.name }</Link>) }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, null)(AdventureList);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport './AdventureView.sass';\r\n\r\nconst AdventureView = (props: any) => {\r\n  const { match } = props;\r\n  const { id } = match.params;\r\n  const history = useHistory()\r\n\r\n  return (\r\n    <div className='adventure-view'>\r\n      <span>Adventure id { id }</span>\r\n      <Link to={ `${ id }/character/view/a_a` }>a_a</Link>\r\n\r\n      <button onClick={ () => history.push(`/adventure/view/${id}/character/create`) }>Create character</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, null)(AdventureView);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './CharacterCreate.sass';\r\n\r\ninterface CharacterCreateProps {\r\n\r\n}\r\n\r\nconst CharacterCreate = (props: CharacterCreateProps) => {\r\n  const [state, setState] = useState(true);\r\n\r\n  useEffect(() => {\r\n    console.log('[CharacterCreate WORKS!!!]', null);\r\n  }, [state]);\r\n\r\n  return (\r\n    <div className='character-create'>\r\n      <button onClick={ () => setState(!state) }>CharacterCreate WORKS!!!</button>\r\n      <input type=\"text\"/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, null)(CharacterCreate);\r\n","import { Table } from \"antd\"\r\nimport React from \"react\"\r\nimport { CharacterInfo, CharacterDescription } from \"../../../types/adventure/character\"\r\n\r\ninterface CharacterGeneralInfoSectionProps {\r\n    info: CharacterInfo\r\n    description: CharacterDescription\r\n}\r\n\r\nexport const CharacterGeneralInfoSection: React.FC<CharacterGeneralInfoSectionProps> = ({ info, description }) => {\r\n    return <>\r\n        <img style={{ width: '100%', height: 100, objectFit: 'cover', objectPosition: '50% 25%' }} src={description.imageUrl} alt=\"\" />\r\n        <Table\r\n            title={() => 'Основная информация'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '100%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                    // render: (text: React.ReactNode) => <a>text</a>\r\n                },\r\n                {\r\n                    title: 'value',\r\n                    dataIndex: 'value',\r\n                    key: 'value',\r\n                }\r\n            ]}\r\n            dataSource={[\r\n                {\r\n                    key: 'playerName',\r\n                    name: 'Имя игрока',\r\n                    value: info.playerName\r\n                },\r\n                {\r\n                    key: 'characterName',\r\n                    name: 'Имя персонажа',\r\n                    value: info.characterName\r\n                },\r\n                {\r\n                    key: '1',\r\n                    name: 'Расса (подвид)',\r\n                    value: info.subRace\r\n                },\r\n                {\r\n                    key: '2',\r\n                    name: 'Пол',\r\n                    value: description.sex\r\n                },\r\n                {\r\n                    key: '3',\r\n                    name: 'Возраст',\r\n                    value: description.age.human\r\n                },\r\n                {\r\n                    key: '4',\r\n                    name: 'Рост',\r\n                    value: description.height\r\n                },\r\n                {\r\n                    key: '5',\r\n                    name: 'Вес',\r\n                    value: description.weight\r\n                },\r\n                {\r\n                    key: '6',\r\n                    name: 'Предистория',\r\n                    value: info.background\r\n                },\r\n            ]}\r\n        />\r\n    </>\r\n}","import { connect } from 'react-redux';\r\nimport React, { SetStateAction } from 'react';\r\nimport './GameMenu.sass'\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\r\nimport WhatshotIcon from '@material-ui/icons/Whatshot';\r\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\r\nimport { Menu, Dropdown, Button } from 'antd';\r\nimport { CharacterViewTabName } from '../CharacterView';\r\nimport { ClientWindowResolution } from '../../../types/general';\r\n\r\nconst generalInfoMenuTabs: menuTab[] = [\r\n    { name: 'generalInfo', caption: 'О персонаже' },\r\n    { name: 'attributes', caption: 'Характеристики' },\r\n    { name: 'experience', caption: 'Класс и опыт' },\r\n    { name: 'proficiency', caption: 'Владение' },\r\n    { name: 'combat', caption: 'Боевые параметры' },\r\n];\r\n\r\nconst journalMenuTabs: menuTab[] = [\r\n    { name: 'generalInfo', caption: 'Время' },\r\n    { name: 'generalInfo', caption: 'Заметки' },\r\n    { name: 'generalInfo', caption: 'Квесты' },\r\n    { name: 'generalInfo', caption: 'Персонажи' },\r\n    { name: 'generalInfo', caption: 'Лог' },\r\n];\r\n\r\nconst equipmentMenuTabs: menuTab[] = [\r\n    { name: 'equipment', caption: 'Экипировка' },\r\n];\r\n\r\nconst abilitiesMenuTabs: menuTab[] = [\r\n    { name: 'generalInfo', caption: 'Способности' },\r\n    { name: 'generalInfo', caption: 'Навыки' },\r\n    { name: 'generalInfo', caption: 'Умения' },\r\n    { name: 'generalInfo', caption: 'Ритуалы' },\r\n    { name: 'generalInfo', caption: 'Заклинания' },\r\n];\r\n\r\ninterface GameMenuProps {\r\n    windowData: ClientWindowResolution;\r\n    setCharacterViewTab: React.Dispatch<SetStateAction<CharacterViewTabName>>;\r\n}\r\n\r\ninterface menuTab {\r\n    name: CharacterViewTabName;\r\n    caption: string;\r\n}\r\n\r\nconst GameMenu = (props: GameMenuProps) => {\r\n    const { isLandscape, isMobile } = props.windowData;\r\n\r\n    const renderSubmenu = (tabs: menuTab[]) =>\r\n        <Menu className={'submenu'}>\r\n            {tabs.map((tab: menuTab) =>\r\n                <Menu.Item key={tab.name} onClick={() => props.setCharacterViewTab(tab.name)} children={tab.caption} />)\r\n            }\r\n        </Menu>\r\n\r\n    const portraitMenu = (key: string, overlay: JSX.Element, icon: JSX.Element) => (\r\n        <Dropdown key={key} overlay={overlay} overlayStyle={isLandscape ? {} : { width: '100%' }}>\r\n            <Button className={'game-menu__button'} children={icon} />\r\n        </Dropdown>\r\n    )\r\n\r\n    return (\r\n        <div\r\n            className={'game-menu'}\r\n            style={isLandscape && !isMobile\r\n                ? { width: 180, flexDirection: 'column', justifyContent: 'space-between' }\r\n                : { height: 60, flexDirection: 'row' }\r\n            }>\r\n            {isLandscape && !isMobile\r\n                ? (<>\r\n                    {renderSubmenu(generalInfoMenuTabs)}\r\n                    {renderSubmenu(journalMenuTabs)}\r\n                    {renderSubmenu(equipmentMenuTabs)}\r\n                    {renderSubmenu(abilitiesMenuTabs)}\r\n                    {/* TODO: add favorites sections */}\r\n                </>)\r\n                : (<>\r\n                    {portraitMenu('generalInfoMenu', renderSubmenu(generalInfoMenuTabs), <FaceIcon />)}\r\n                    {portraitMenu('journalMenuTabs', renderSubmenu(journalMenuTabs), <MenuBookIcon />)}\r\n                    {portraitMenu('equipmentMenuTabs', renderSubmenu(equipmentMenuTabs), <AccountBalanceWalletIcon />)}\r\n                    {portraitMenu('abilitiesMenuTabs', renderSubmenu(abilitiesMenuTabs), <WhatshotIcon />)}\r\n                    {/* TODO: add favorites sections <FavoriteBorderIcon /> */}\r\n                </>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(null, null)(GameMenu);","export const calculateAttributeBonus = (value: number) => {\r\n    return Math.round((value - 0.5) / 2 - 5)\r\n}","import { Table } from \"antd\"\r\nimport React from \"react\"\r\nimport { CharacterAttributes, SkillsProficiency } from \"../../../types/adventure/character\"\r\nimport { calculateAttributeBonus } from \"./helpers\"\r\n\r\ninterface CharacterAttributesSectionProps {\r\n    attributes: CharacterAttributes,\r\n    skills: SkillsProficiency,\r\n}\r\n\r\nexport const CharacterAttributesSection: React.FC<CharacterAttributesSectionProps> = ({ attributes, skills }) => {\r\n    return <>\r\n        <Table\r\n            title={() => 'Характеристики'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '100%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                    // render: (text: React.ReactNode) => <a>text</a>\r\n                },\r\n                {\r\n                    title: 'Count',\r\n                    dataIndex: 'count',\r\n                    key: 'count',\r\n                },\r\n                {\r\n                    title: 'Bonus',\r\n                    dataIndex: 'bonus',\r\n                    key: 'bonus',\r\n                },\r\n                {\r\n                    title: 'Skills',\r\n                    dataIndex: 'skills',\r\n                    key: 'skills',\r\n                    render: (skillsProficiency: { name: string, value: boolean }[]) => {\r\n                        return skillsProficiency.map((skill) => {\r\n                            return <div style={{color: skill.value ? 'green' : ''}}>{skill.name}</div>\r\n                        })\r\n                    }\r\n                }\r\n            ]}\r\n            dataSource={[\r\n                {\r\n                    key: '1',\r\n                    name: 'Сила',\r\n                    count: attributes.strength,\r\n                    bonus: calculateAttributeBonus(attributes.strength),\r\n                    skills: [\r\n                        { name: 'Атлетика', value: skills.Athletics }\r\n                    ]\r\n                },\r\n                {\r\n                    key: '2',\r\n                    name: 'Ловкость',\r\n                    count: attributes.dexterity,\r\n                    bonus: calculateAttributeBonus(attributes.dexterity),\r\n                    skills: [\r\n                        { name: 'Акробатика', value: skills.Acrobatics },\r\n                        { name: 'Ловкость рук', value: skills.SleightOfHand },\r\n                        { name: 'Скрытность', value: skills.Stealth }\r\n                    ]\r\n                },\r\n                {\r\n                    key: '3',\r\n                    name: 'Телосложение',\r\n                    count: attributes.constitution,\r\n                    bonus: calculateAttributeBonus(attributes.constitution),\r\n                    skills: [\r\n                        { name: 'Выносливость', value: skills.Endurance }\r\n                    ]\r\n                },\r\n                {\r\n                    key: '4',\r\n                    name: 'Интеллект',\r\n                    count: attributes.intelligence,\r\n                    bonus: calculateAttributeBonus(attributes.intelligence),\r\n                    skills: [\r\n                        { name: 'Анализ', value: skills.Investigation },\r\n                        { name: 'История', value: skills.History },\r\n                        { name: 'Магия', value: skills.Arcana },\r\n                        { name: 'Природа', value: skills.Nature },\r\n                        { name: 'Религия', value: skills.Religion }\r\n                    ]\r\n                },\r\n                {\r\n                    key: '5',\r\n                    name: 'Мудрость',\r\n                    count: attributes.wisdom,\r\n                    bonus: calculateAttributeBonus(attributes.wisdom),\r\n                    skills: [\r\n                        { name: 'Внимательность', value: skills.Perception },\r\n                        { name: 'Выживание', value: skills.Survival },\r\n                        { name: 'Медицина', value: skills.Medicine },\r\n                        { name: 'Проницательность', value: skills.Insight },\r\n                        { name: 'Уход за животными', value: skills.AnimalHandling },\r\n                    ]\r\n                },\r\n                {\r\n                    key: '6',\r\n                    name: 'Харизма',\r\n                    count: attributes.charisma,\r\n                    bonus: calculateAttributeBonus(attributes.charisma),\r\n                    skills: [\r\n                        { name: 'Выступление', value: skills.Performance },\r\n                        { name: 'Запугивание', value: skills.Intimidation },\r\n                        { name: 'Обман', value: skills.Deception },\r\n                        { name: 'Убеждение', value: skills.Persuasion },\r\n                    ]\r\n                },\r\n            ]}\r\n        />\r\n    </>\r\n}","import { Table } from \"antd\"\r\nimport React from \"react\"\r\nimport { CharacterAction, CharacterClass, CharacterInfo } from \"../../../types/adventure/character\"\r\n\r\ninterface CharacterExperienceSectionProps {\r\n    classes: CharacterClass[];\r\n    action: CharacterAction;\r\n    info: CharacterInfo;\r\n}\r\n\r\nexport const CharacterExperienceSection: React.FC<CharacterExperienceSectionProps> = ({ classes, action, info }) => {\r\n    return <>\r\n        <Table\r\n            title={() => 'Класс'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '100%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                    // render: (text: React.ReactNode) => <a>text</a>\r\n                },\r\n                {\r\n                    title: 'Level',\r\n                    dataIndex: 'level',\r\n                    key: 'level',\r\n                }\r\n            ]}\r\n            dataSource={classes.map((characterClass) => {\r\n                return {\r\n                    key: characterClass.name,\r\n                    name: characterClass.name,\r\n                    level: characterClass.level\r\n                }\r\n            })}\r\n        />\r\n        <Table\r\n            title={() => 'Черты'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '100%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                    // render: (text: React.ReactNode) => <a>text</a>\r\n                },\r\n            ]}\r\n            dataSource={info.feats.length\r\n                ? info.feats.map((feat) => {\r\n                    return {\r\n                        key: feat,\r\n                        name: feat\r\n                    }\r\n                })\r\n                : [{\r\n                    key: 'feat',\r\n                    name: 'Нет'\r\n                }]\r\n            }\r\n        />\r\n\r\n        <Table\r\n            title={() => 'Другое'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '100%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                    // render: (text: React.ReactNode) => <a>text</a>\r\n                },\r\n                {\r\n                    title: 'Value',\r\n                    dataIndex: 'value',\r\n                    key: 'value',\r\n                }\r\n            ]}\r\n            dataSource={[\r\n                {\r\n                    key: 'exp',\r\n                    name: 'Опыт',\r\n                    value: action.experience\r\n                },\r\n                {\r\n                    key: 'bonus',\r\n                    name: 'Бонус мастерства',\r\n                    value: action.bonus\r\n                },\r\n                {\r\n                    key: 'inspiration',\r\n                    name: 'Вдохновение',\r\n                    value: action.inspiration ? 'Есть' : 'Нет'\r\n                },\r\n            ]}\r\n        />\r\n    </>\r\n}","import { Table } from \"antd\"\r\nimport React from \"react\"\r\nimport { CharacterProficiency } from \"../../../types/adventure/character\"\r\n\r\ninterface CharacterProficiencySectionProps {\r\n    proficiency: CharacterProficiency;\r\n}\r\n\r\nexport const CharacterProficiencySection: React.FC<CharacterProficiencySectionProps> = ({ proficiency }) => {\r\n    return <div style={{display: 'flex', flexWrap: 'wrap'}}>\r\n        <Table\r\n            title={() => 'Языки'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '50%', marginBottom: 16}}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                }\r\n            ]}\r\n            dataSource={proficiency.languages.length\r\n                ? proficiency.languages.map((value) => {\r\n                    return {\r\n                        key: value,\r\n                        name: value\r\n                    }\r\n                })\r\n                : [{\r\n                    key: 'feat',\r\n                    name: 'Нет'\r\n                }]\r\n            }\r\n        />\r\n        <Table\r\n            title={() => 'Инструменты'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '50%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                }\r\n            ]}\r\n            dataSource={proficiency.tools.length\r\n                ? proficiency.tools.map((value) => {\r\n                    return {\r\n                        key: value,\r\n                        name: value\r\n                    }\r\n                })\r\n                : [{\r\n                    key: 'feat',\r\n                    name: 'Нет'\r\n                }]\r\n            }\r\n        />\r\n        <Table\r\n            title={() => 'Оружие'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '50%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                }\r\n            ]}\r\n            dataSource={proficiency.weapons.length\r\n                ? proficiency.weapons.map((value) => {\r\n                    return {\r\n                        key: value,\r\n                        name: value\r\n                    }\r\n                })\r\n                : [{\r\n                    key: 'feat',\r\n                    name: 'Нет'\r\n                }]\r\n            }\r\n        />\r\n        <Table\r\n            title={() => 'Доспехи'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '50%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                }\r\n            ]}\r\n            dataSource={proficiency.armor.length\r\n                ? proficiency.armor.map((value) => {\r\n                    return {\r\n                        key: value,\r\n                        name: value\r\n                    }\r\n                })\r\n                : [{\r\n                    key: 'feat',\r\n                    name: 'Нет'\r\n                }]\r\n            }\r\n        />\r\n    </div>\r\n}","import { Table } from \"antd\"\r\nimport React from \"react\"\r\nimport { CharacterAction, CharacterAttributes, CharacterEffects, CharacterStats } from \"../../../types/adventure/character\"\r\nimport { calculateAttributeBonus } from \"./helpers\"\r\n\r\ninterface CharacterCombatSectionProps {\r\n    action: CharacterAction;\r\n    attributes: CharacterAttributes;\r\n    stats: CharacterStats;\r\n    effects: CharacterEffects\r\n}\r\n\r\nexport const CharacterCombatSection: React.FC<CharacterCombatSectionProps> = ({ action, attributes, stats, effects }) => {\r\n    return <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n        <Table\r\n            title={() => 'Боевые навыки'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '100%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                },\r\n                {\r\n                    title: 'value',\r\n                    dataIndex: 'value',\r\n                    key: 'value',\r\n                }\r\n            ]}\r\n            dataSource={[\r\n                {\r\n                    key: 'passiveWisdom',\r\n                    name: 'Пассивная мудрость',\r\n                    value: 10 + calculateAttributeBonus(attributes.wisdom),\r\n                },\r\n                {\r\n                    key: 'armour',\r\n                    name: 'Клас доспеха',\r\n                    value: action.armorClass\r\n                },\r\n                {\r\n                    key: 'initiative',\r\n                    name: 'Бонус инициативы',\r\n                    value: stats.initiative\r\n                },\r\n                {\r\n                    key: 'speed',\r\n                    name: 'Скорость',\r\n                    value: stats.speed\r\n                },\r\n                {\r\n                    key: 'size',\r\n                    name: 'Размер',\r\n                    value: stats.size\r\n                },\r\n                {\r\n                    key: 'darkVision',\r\n                    name: 'Темное зрение',\r\n                    value: stats.darkVision\r\n                },\r\n            ]}\r\n        />\r\n        <Table\r\n            title={() => 'Хитпоинты'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '50%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                },\r\n                {\r\n                    title: 'value',\r\n                    dataIndex: 'value',\r\n                    key: 'value',\r\n                }\r\n            ]}\r\n            dataSource={[\r\n                {\r\n                    key: 'hitPoints.max',\r\n                    name: 'Максимум',\r\n                    value: action.hitPoints.max\r\n                },\r\n                {\r\n                    key: 'hitPoints.temp',\r\n                    name: 'Временные',\r\n                    value: action.hitPoints.temp\r\n                },\r\n                {\r\n                    key: 'hitPoints.current',\r\n                    name: 'Текущие',\r\n                    value: action.hitPoints.current\r\n                }\r\n            ]}\r\n        />\r\n        <Table\r\n            title={() => 'Спасброски от смерти'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '50%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                },\r\n                {\r\n                    title: 'value',\r\n                    dataIndex: 'value',\r\n                    key: 'value',\r\n                }\r\n            ]}\r\n            dataSource={[\r\n                {\r\n                    key: 'deathSaves.successes',\r\n                    name: 'Успех',\r\n                    value: action.deathSaves.successes\r\n                },\r\n                {\r\n                    key: 'deathSaves.failures',\r\n                    name: 'Провал',\r\n                    value: action.deathSaves.failures\r\n                }\r\n            ]}\r\n        />\r\n        <Table\r\n            title={() => 'Бонусы'}\r\n            showHeader={false}\r\n            pagination={false}\r\n            style={{ width: '50%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Name',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                },\r\n                {\r\n                    render: (args) => {\r\n                        return args.value.map((value: any) => {\r\n                            return `${value}, `\r\n                        })\r\n                    }\r\n                }\r\n            ]}\r\n            dataSource={[\r\n                {\r\n                    key: 'savingThrows',\r\n                    name: 'Спасброски',\r\n                    value: effects.savingThrows\r\n                },\r\n                {\r\n                    key: 'resistance',\r\n                    name: 'Сопротивление',\r\n                    value: effects.resistance\r\n                },\r\n                {\r\n                    key: 'immunity',\r\n                    name: 'Имунитеты',\r\n                    value: effects.immunity\r\n                },\r\n            ]}\r\n        />\r\n    </div>\r\n}","import { Button, Form, Input, Table } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { getAdventure, setAdventureToDB } from \"../../../api/firebase\";\r\nimport { Adventure } from \"../../../types/adventure\";\r\nimport { CharacterEquipment } from \"../../../types/adventure/character\";\r\nimport { Item } from \"../../../types/items\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport './characterEquipment.sass'\r\n\r\nconst { TextArea } = Input;\r\n\r\ninterface CharacterEquipmentSectionProps {\r\n    equipment: CharacterEquipment[]\r\n}\r\n\r\ninterface AddItemFormFields {\r\n    name: string | string[]\r\n    description?: string | string[]\r\n    count?: number\r\n    cost?: number\r\n}\r\n\r\nexport const CharacterEquipmentSection: React.FC<CharacterEquipmentSectionProps> = ({ equipment }) => {\r\n    const [adventure, setAdventure] = useState<Adventure>();\r\n    const [isButtonOpen, setIsButtonOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getAdventure('Djadame').then((data) => setAdventure(data))\r\n    }, [])\r\n\r\n    const addItem = (values: AddItemFormFields) => {\r\n        // TODO fix bug if simultaneously try to save items\r\n        if (adventure) {\r\n            const nextAdventure = adventure;\r\n            nextAdventure.customCounter++;\r\n            const newItem: Item = {\r\n                id: `DjadameCustomItem${nextAdventure.customCounter}`,\r\n                cost: values.cost || 0,\r\n                description: {\r\n                    en: '',\r\n                    ru: values.description || '',\r\n                },\r\n                name: {\r\n                    en: '',\r\n                    ru: values.name,\r\n                },\r\n                rarity: 'common',\r\n                type: 'itemsPack',\r\n                weight: 0,\r\n                count: values.count\r\n            }\r\n            nextAdventure.itemsList.push(newItem);\r\n            setAdventure(nextAdventure);\r\n            setIsButtonOpen(false);\r\n            setAdventureToDB('Djadame', adventure);\r\n        }\r\n    }\r\n    return <>\r\n        <div className={'openButtonWrap'}><div className={`openButton ${isButtonOpen ? 'active' : ''}`} onClick={() => { setIsButtonOpen(!isButtonOpen) }}><AddIcon /></div></div>\r\n        {\r\n            isButtonOpen && <Form\r\n                className={'addItemSection'}\r\n                name={'addItem'}\r\n                onFinish={addItem}\r\n                onFinishFailed={(errors) => { console.log(errors) }}>\r\n                <Form.Item\r\n                    name={'name'}\r\n                    rules={[{ required: true, message: 'Название не должно быть пустым' }]}>\r\n                    <Input placeholder={'Название предмета'} />\r\n                </Form.Item>\r\n                <Form.Item name={'description'}>\r\n                    <TextArea placeholder={'Описание предмета'} autoSize />\r\n                </Form.Item>\r\n                <div className=\"addItemFooter\">\r\n                    <Form.Item name={'count'}>\r\n                        <Input placeholder={'Количество'}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item name={'cost'}>\r\n                        <Input placeholder={'Цена'} />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type={'primary'} htmlType=\"submit\">Add</Button>\r\n                    </Form.Item>\r\n                </div>\r\n            </Form>\r\n        }\r\n        <Table\r\n            title={() => 'Инвентарь'}\r\n            showHeader={true}\r\n            pagination={false}\r\n            style={{ width: '100%' }}\r\n            columns={[\r\n                {\r\n                    title: 'Название',\r\n                    dataIndex: 'name',\r\n                    key: 'name',\r\n                    sorter: (a, b) => a.name[0] > b.name[0] ? 1 : -1\r\n                    // render: (text: React.ReactNode) => <a>text</a>\r\n                },\r\n                {\r\n                    title: 'Количество',\r\n                    dataIndex: 'count',\r\n                    key: 'count',\r\n                    sorter: (a, b) => {\r\n                        if (a.count && b.count) {\r\n                            return a.count - b.count\r\n                        } else return 0\r\n                    }\r\n                },\r\n            ]}\r\n            expandedRowRender={((record: AddItemFormFields) => <>\r\n                {record.cost && record.cost !== 0\r\n                    ? <p>{`Цена ${Math.trunc(record.cost / 10000)} ЗМ ${Math.trunc(record.cost / 100 % 100)} СМ ${record.cost % 100} ММ`}</p>\r\n                    : undefined}\r\n                {record.description && <p>{record.description}</p>}\r\n            </>)}\r\n            dataSource={\r\n                adventure?.itemsList.map(item => {\r\n                    return {\r\n                        key: item.id,\r\n                        name: item.name.ru,\r\n                        count: item.count,\r\n                        cost: item.cost,\r\n                        description: item.description.ru\r\n                    }\r\n                })\r\n            }\r\n        />\r\n    </>\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './CharacterView.sass';\r\nimport { getCharacter } from '../../api/firebase';\r\nimport { Character } from '../../types/adventure/character';\r\nimport { CharacterGeneralInfoSection } from './characterInfoSection/characterGeneralInfo';\r\nimport GameMenu from './GameMenu/GameMenu';\r\nimport { CharacterAttributesSection } from './characterInfoSection/characterAttributes';\r\nimport { CharacterExperienceSection } from './characterInfoSection/characterExperience';\r\nimport { CharacterProficiencySection } from './characterInfoSection/characterProficiency';\r\nimport { CharacterCombatSection } from './characterInfoSection/characterCombat';\r\nimport { ClientWindowResolution } from '../../types/general';\r\nimport { CharacterEquipmentSection } from './characterEquipmentSection/characterEquipment';\r\n\r\nexport type CharacterViewTabName = 'generalInfo' | 'attributes' | 'experience' | 'proficiency' | 'combat' | 'equipment';\r\n\r\ninterface CharacterViewProps {\r\n    windowData: ClientWindowResolution;\r\n    match: any\r\n}\r\n\r\nconst CharacterView = (props: CharacterViewProps) => {\r\n    const [character, setCharacter] = useState<Character>();\r\n    const [currentTab, setCurrentTab] = useState<CharacterViewTabName>('generalInfo')\r\n\r\n    useEffect(() => {\r\n        getCharacter(props.match.params.id)\r\n            .then((data) => {\r\n                if (data) {\r\n                    setCharacter(data)\r\n                    console.log('[characterData]', data);\r\n                }\r\n            })\r\n    }, [props.match.params.id]);\r\n\r\n    // console.log('[state.character]', JSON.stringify(character));\r\n\r\n    const renderTab = (currentTab: CharacterViewTabName, character: Character) => {\r\n        const tab: Record<CharacterViewTabName, JSX.Element> = {\r\n            // Character about\r\n            generalInfo: <CharacterGeneralInfoSection info={character.about.info} description={character.about.description} />,\r\n            attributes: <CharacterAttributesSection attributes={character.about.attributes} skills={character.about.proficiency.skills} />,\r\n            experience: <CharacterExperienceSection classes={character.about.info.classes} action={character.about.action} info={character.about.info} />,\r\n            proficiency: <CharacterProficiencySection proficiency={character.about.proficiency} />,\r\n            combat: <CharacterCombatSection action={character.about.action} attributes={character.about.attributes} stats={character.about.stats} effects={character.about.effects} />,\r\n            // Equipment\r\n            equipment: <CharacterEquipmentSection equipment={character.equipment} />,\r\n        }\r\n        return tab[currentTab]\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                character\r\n                    ? <div style={{\r\n                        display: 'flex',\r\n                        flexDirection: props.windowData.isMobile ? 'column' : 'row',\r\n                        justifyContent: 'space-between'\r\n                    }}>\r\n                        <div\r\n                            style={{\r\n                                height: props.windowData.isMobile ? props.windowData.height - 30 - 60 : props.windowData.height,\r\n                                overflow: 'auto'\r\n                            }}\r\n                            children={renderTab(currentTab, character)}\r\n                        />\r\n                        <GameMenu setCharacterViewTab={setCurrentTab} windowData={props.windowData} />\r\n                    </div>\r\n                    : <div>Loading . . .</div>\r\n            }\r\n            {/* <button onClick={\r\n                () => setCharacterToDB('gremmy', characterMock)\r\n            }>set</button> */}\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: CharacterViewProps) => {\r\n    return ({\r\n        windowData: state.windowData,\r\n    })\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(CharacterView);\r\n","import AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as ROUTES from '../../routes';\r\nimport './SideMenu.sass';\r\nimport { connect } from 'react-redux';\r\nimport { ClientWindowResolution } from '../../types/general';\r\nimport { Drawer, Switch } from 'antd';\r\n\r\ninterface SideMenuProps {\r\n  windowData?: ClientWindowResolution;\r\n  isMenuOpened: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\ninterface SideMenuState {\r\n  isMenuCollapsed: boolean;\r\n}\r\n\r\nconst SideMenu = (props: SideMenuProps) => {\r\n  const [state, setState] = useState<SideMenuState>({\r\n    isMenuCollapsed: false\r\n  });\r\n\r\n  const renderMenuItem = (route: string, staticItem: JSX.Element, text: string) => {\r\n    return <div className='menu-list__item'>\r\n      <Link to={route} className='menu-list__link'>\r\n        <div className='menu-list__static-item'>{staticItem}</div>\r\n        <div className={!state.isMenuCollapsed ? 'menu-list__text' : 'menu-list__text collapsed'}>\r\n          <span>{text}</span>\r\n        </div>\r\n      </Link>\r\n    </div>;\r\n  };\r\n\r\n  const renderMenuList = () => {\r\n    return <div className='menu-list'>\r\n      <div>\r\n        {renderMenuItem(ROUTES.DASHBOARD, <HomeIcon />, 'Главная')}\r\n        {renderMenuItem(ROUTES.ADVENTURE_CREATE, <AddIcon />, 'Создать приключение')}\r\n        {renderMenuItem(ROUTES.ADVENTURE_LIST, <ListIcon />, 'Мои приключения')}\r\n        {renderMenuItem('/game/adventure/view/Djadame/character/create', <PersonAddIcon />, 'Создать персонажа')}\r\n        {renderMenuItem('/game/adventure/view/Djadame/character/view/gremmy', <FaceIcon />, 'gremmy')}\r\n        {renderMenuItem('/game/adventure/view/Djadame/character/view/klinfort', <FaceIcon />, 'klinfort char')}\r\n        {renderMenuItem('/game/adventure/view/Djadame/character/view/skarlet', <FaceIcon />, 'skarlet char')}\r\n      </div>\r\n      <div>\r\n        {renderMenuItem(ROUTES.SIGN_IN, <AccountCircleIcon />, 'Вход')}\r\n        {renderMenuItem(ROUTES.SIGN_UP, <AccountCircleIcon />, 'Регистрация')}\r\n        {\r\n          !props.windowData?.isMobile &&\r\n          <div className='menu-list__item switch'>\r\n            <Switch\r\n              checked={!state.isMenuCollapsed}\r\n              onChange={() => setState({ ...state, isMenuCollapsed: !state.isMenuCollapsed })} />\r\n            <span\r\n              className={!state.isMenuCollapsed ? 'menu-list__text' : 'menu-list__text collapsed'}>COLLAPSE MENU\r\n          </span>\r\n          </div>\r\n        }\r\n      </div>\r\n    </div>;\r\n  };\r\n\r\n  return props.windowData?.isMobile\r\n    ? <Drawer\r\n      visible={props.isMenuOpened}\r\n      onClose={props.onClose}>\r\n      <div\r\n        className='side-menu side-menu--mobile'\r\n        onClick={props.onClose}\r\n        onKeyDown={props.onClose}>\r\n        {renderMenuList()}\r\n      </div>\r\n    </Drawer>\r\n    : <div\r\n      className={`side-menu side-menu--desktop ${state.isMenuCollapsed ? 'collapsed' : ''} ${!props.isMenuOpened ? 'closed' : ''}`}>\r\n      {renderMenuList()}\r\n    </div>;\r\n};\r\n\r\nconst mapStateToProps = (state: SideMenuProps) => {\r\n  return ({\r\n    windowData: state.windowData,\r\n  })\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(SideMenu);","import 'antd/dist/antd.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport * as ROUTES from './routes';\r\nimport Home from './pages/home/Home';\r\nimport SignIn from './pages/signIn/SignIn';\r\nimport SignUp from './pages/signUp/SignUp';\r\nimport AdventureCreate from './pages/adventureCreate/AdventureCreate';\r\nimport AdventureList from './pages/adventureList/AdventureList';\r\nimport AdventureView from './pages/adventureView/AdventureView';\r\nimport CharacterCreate from './pages/characterCreate/CharacterCreate';\r\nimport CharacterView from './pages/characterView/CharacterView';\r\nimport './App.sass'\r\nimport { connect } from 'react-redux';\r\nimport { setWindowAction } from './redux/actions/windowActions';\r\nimport SideMenu from './common/SideMenu/SideMenu';\r\nimport { ClientWindowResolution } from './types/general';\r\n\r\ninterface AppProps {\r\n    windowData: ClientWindowResolution;\r\n    userData: string;\r\n    setWindow: () => void;\r\n}\r\n\r\ninterface AppState {\r\n    isMenuOpened: boolean;\r\n}\r\n\r\nconst App: React.FC<AppProps> = (props) => {\r\n    const headerHeight = 30;\r\n    const [state, setState] = useState<AppState>({\r\n        isMenuOpened: false\r\n    });\r\n\r\n    useEffect(() => {\r\n        window.onresize = props.setWindow;\r\n        props.setWindow();\r\n\r\n        return () => {\r\n            window.onresize = null;\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className={'app'}>\r\n                <SideMenu\r\n                    isMenuOpened={state.isMenuOpened}\r\n                    onClose={() => setState({ isMenuOpened: false })} />\r\n\r\n                <div className='header' style={props.windowData?.isMobile ? { height: headerHeight } : { display: 'none' }}>\r\n                    <button className=\"menu-button\" onClick={() => setState({ isMenuOpened: true })}>menu</button>\r\n                </div>\r\n\r\n                <div\r\n                    className={'app-site'}\r\n                    style={{\r\n                        height: props.windowData?.isMobile ? props.windowData.height - headerHeight : props.windowData.height,\r\n                        overflow: 'auto',\r\n                    }}\r\n                >\r\n                    <Route exact path={ROUTES.DASHBOARD} component={Home} />\r\n                    <Route path={ROUTES.SIGN_IN} component={SignIn} />\r\n                    <Route path={ROUTES.SIGN_UP} component={SignUp} />\r\n                    <Route path={ROUTES.ADVENTURE_CREATE} component={AdventureCreate} />\r\n                    <Route path={ROUTES.ADVENTURE_LIST} component={AdventureList} />\r\n                    <Route exact path={ROUTES.ADVENTURE_VIEW} component={AdventureView} />\r\n                    <Route path={ROUTES.CHARACTER_CREATE} component={CharacterCreate} />\r\n                    <Route path={ROUTES.CHARACTER_VIEW} component={CharacterView} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppProps) => {\r\n    return ({\r\n        windowData: state.windowData,\r\n        userData: state.userData\r\n    })\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    setWindow: setWindowAction\r\n})(App);","import { Dispatch } from \"redux\";\r\nimport { setWindowActionConverter } from \".\";\r\nimport { ClientWindowResolution } from \"../../types/general\";\r\n\r\nexport const setWindowAction: () => (dispatch: Dispatch) => (Promise<void>) = () => async (dispatch) => {\r\n    document.documentElement.style.setProperty('--vh', `${document.documentElement.clientHeight * 0.01}px`);\r\n    const body = document.getElementsByTagName('body')[0];\r\n    \r\n    const windowData: ClientWindowResolution = {\r\n        width: body.clientWidth,\r\n        height: body.clientHeight,\r\n        isMobile: body.clientWidth < 1024,\r\n        isLandscape: body.clientWidth > body.clientHeight\r\n    }\r\n\r\n    dispatch(setWindowActionConverter(windowData));\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport './index.sass';\r\nimport { store } from './store';\r\nimport App from './app/App';\r\n\r\nconst RoutedApp = () => (\r\n  <Provider store={ store }>\r\n    <Router basename='/dmt2'>\r\n      <App />\r\n    </Router>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(<RoutedApp />, document.getElementById('root'));\r\n"],"sourceRoot":""}